{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Project Management Dashboard\n\n## Overview\n\nThis is a responsive, interactive web-based dashboard application for monitoring all projects in an organization. The dashboard provides comprehensive project oversight with KPI cards, interactive charts, and detailed project tables. It features real-time data visualization for project status, budget variance analysis, and performance metrics across different organizational divisions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 20, 2025)\n\n### Migration to Replit Environment Completed\n- Successfully migrated project from Replit Agent to Replit environment\n- Fixed critical runtime errors with UI5 WebComponents causing CSS selector issues\n- Resolved routing conflicts between react-router-dom and wouter\n- Replaced problematic UI5 chart components with responsive dashboard cards\n\n### Dashboard Redesign\n- Created responsive single-section dashboard layout with all components (KPIs, charts, table) in one view\n- Implemented mobile-first responsive design with grid layouts that adapt to screen sizes  \n- Enhanced project details page as a comprehensive dashboard with KPI cards at top\n- All data preserved including milestones, risks, upcoming/late activities with original rendering\n- Improved user experience with compact, informative dashboard design\n- Updated data schema to include new margin fields: ProjectedGross Margin (%), Actual GrossMargin (%), % Deviation of the Profit Margin\n- Modified KPI cards to be smaller width and removed active/completed projects, added total risks counter\n- Updated charts to use Performance Category for project status pie chart instead of calculated performance index\n- Enhanced project table with new margin columns and performance category display\n- All chart data now sourced from dedicated API endpoints for better performance\n\n### New Features Added\n- Performance Category statistics API endpoint\n- Spending Categories statistics API endpoint  \n- Division statistics API endpoint\n- Enhanced project data model with margin calculations\n- Real-time chart updates using proper API data sources\n\n### Project Details Dashboard Implementation\n- Redesigned project details page as compact dashboard layout with all data preserved\n- Added KPI cards at top: Scope Completion, Time Completion, Performance Category, Budget Status, Margin Deviation, Active Risks\n- Created Budget vs Time vs Scope Analysis chart with performance comparison visualizations\n- Budget efficiency indicators comparing scope completion to budget consumption\n- Schedule performance metrics comparing scope to time elapsed\n- Visual progress bars for budget utilization, scope completion, and time consumption\n- Upcoming activities section taking 3/4 width with full table layout on large screens\n- Late activities in compact 1/4 width cards with red styling for overdue items\n- Milestones section with progress tracking and timeline visualization\n- Risks management section with status tracking and owner assignments\n- Responsive design that adjusts card layouts for mobile and desktop viewing\n- Enhanced budget consumption analysis comparing performance against time and scope metrics\n- All original data maintained including workstream items, risk tracking, and activity management\n- Added interactive project locations map with Leaflet integration\n- Map displays project locations parsed from location tuples with division-based color coding\n- Project codes rendered as popups on map markers with project details\n- Map legend shows division distribution and project counts by location\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript, utilizing a modern component-based architecture:\n\n- **Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS for utility-first styling with shadcn/ui component library\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Comprehensive shadcn/ui component system with Radix UI primitives\n- **Charts**: Recharts library for data visualization (pie charts, bar charts)\n- **Theme Support**: Dark/light mode toggle with system preference detection\n\n### Backend Architecture\nThe backend follows a REST API pattern using Express.js:\n\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Structure**: RESTful endpoints for project CRUD operations and analytics\n- **Data Storage**: In-memory storage implementation with interface for easy database integration\n- **Validation**: Zod schemas for request/response validation\n\n### Database Design\nPostgreSQL database with Drizzle ORM providing:\n\n- **Projects Table**: Comprehensive project data including budget, timeline, and performance metrics\n- **Schema Validation**: Type-safe database operations with generated TypeScript types\n- **Migrations**: Drizzle Kit for database schema management\n- **Performance Metrics**: JSON fields for flexible storage of EV, PV, AC, CPI, SPI calculations\n\n### Key Features Architecture\n\n**Dashboard Components**:\n- Header with organization branding, global filters, and theme toggle\n- KPI cards displaying project statistics and financial metrics\n- Charts section with spending categories and project status visualizations\n- Interactive project table with sorting, filtering, and detailed modal views\n\n**Data Flow**:\n- React Query handles API calls with caching and background updates\n- Centralized filter state management for dashboard-wide filtering\n- Real-time chart updates based on filter selections\n- Modal-based detailed project views with comprehensive project information\n\n**Performance Considerations**:\n- Optimistic updates for responsive user interactions\n- Efficient re-rendering with React Query's intelligent caching\n- Responsive design patterns for mobile and desktop compatibility\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connection for Neon DB\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-kit**: Database migration and schema management tools\n\n### UI and Styling\n- **@radix-ui/***: Accessible, unstyled UI primitives for complex components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **lucide-react**: Icon library with consistent design\n\n### Data Management\n- **@tanstack/react-query**: Server state management and caching\n- **@hookform/resolvers**: Form validation integration\n- **zod**: Runtime type checking and validation\n- **date-fns**: Date manipulation utilities\n\n### Charts and Visualization\n- **recharts**: React charting library for data visualization\n- **embla-carousel-react**: Carousel component for responsive layouts\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **wouter**: Minimalist routing library for React\n\nThe application is designed to be easily deployable on Replit with built-in development tooling and error handling specifically configured for the Replit environment.","size_bytes":7315},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"data/README.md":{"content":"# Excel Data Source Instructions\n\n## How to Use Excel Data with the Dashboard\n\n### 1. Excel File Setup\nPlace your Excel file at: `data/projects.xlsx`\n\n### 2. Required Excel Column Structure\nYour Excel file must have the following columns (exact names):\n\n| Column Name | Type | Description |\n|-------------|------|-------------|\n| Project Code | Text | Unique project identifier |\n| Description | Text | Project description/name |\n| Start Date | Date | Project start date |\n| Finish Date | Date | Project finish date |\n| Percentage Complete | Decimal | Completion percentage (0.0 to 1.0) |\n| Category | Text | Project category (optional) |\n| Scope Completion | Decimal | Scope completion percentage |\n| Time Completion | Decimal | Time completion percentage |\n| Issues/Risks | Number | Number of issues/risks |\n| Division | Text | Division (Mechanical/Electrical/Instrumentation) |\n| Budget amount | Number | Total project budget |\n| Total Amount Spent | Number | Amount spent so far |\n| Budget Spent | Number | Budget spent ratio |\n| Budget Status | Text | Budget status description |\n| Budget Status Category | Text | Budget category |\n| Location | Text | Coordinates as string: \"[(-3.9389, 39.7419)]\" |\n| Amount received | Number | Amount received |\n\n### 3. Location Format\nFor map display, use this format in the Location column:\n```\n[(-3.9389, 39.7419)]                    // Single location\n[(-0.4571, 39.6434), (-3.9389, 39.7419)] // Multiple locations\n```\n\n### 4. Sample Data\nIf no Excel file is found, the system will use built-in sample data based on your provided structure.\n\n### 5. Reloading Data\n- After updating your Excel file, use the \"Reload Excel Data\" button on the dashboard\n- Or restart the application\n\n### 6. Changing Data Source\nTo modify the data source configuration, edit: `server/excel-data-service.ts`\n- Change `filePath` to point to your Excel file\n- Modify `columnMapping` if your Excel columns have different names\n- Update `sheetName` if using a specific worksheet\n\n### 7. Budget Categories\nThe system automatically calculates budget categories based on spend ratio:\n- **Under Budget**: < 90% spent\n- **Within Budget**: 90%-110% spent  \n- **Over Budget**: 110%-150% spent\n- **Critically Over Budget**: ≥ 150% spent\n\n### 8. Performance Status\nPerformance status is calculated from Time Completion:\n- **Ahead of Schedule**: PI ≥ 1.10\n- **On Track**: 0.90 ≤ PI < 1.10\n- **Slightly Behind**: 0.75 ≤ PI < 0.90\n- **Critical Delay**: PI < 0.75","size_bytes":2476},"server/excel-data-service.ts":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\nimport path from 'path';\nimport type { ExcelProject, ExcelActivity } from '@shared/excel-schema';\nimport { parseLocation, calculateBudgetStatusCategory, calculatePerformanceStatus } from '@shared/excel-schema';\n\n// ==== DATA SOURCE CONFIGURATION ====\n// Change this section to modify your data source easily\nconst DATA_SOURCE_CONFIG = {\n  // Set the path to your Excel file here\n  filePath: path.join(process.cwd(), 'data', 'projects.xlsx'),\n  \n  // Set the sheet names for the two sheets\n  projectsSheetName: 'Projects', // Sheet for project details\n  portfolioSheetName: 'Portfolio', // Sheet for portfolio/activities data\n  \n  // Column mappings from Excel to our schema\n  columnMapping: {\n    'Project Code': 'projectCode',\n    'Description': 'description', \n    'Start Date': 'startDate',\n    'Finish Date': 'finishDate',\n    'Percentage Complete': 'percentageComplete',\n    'Category': 'category',\n    'Scope Completion': 'scopeCompletion',\n    'Time Completion': 'timeCompletion',\n    'Performance index': 'performanceIndex',\n    'Performance Category': 'performanceCategory',\n    'Priority': 'priority',\n    'Issues/Risks': 'issuesRisks',\n    'Division': 'division',\n    'Budget amount': 'budgetAmount',\n    'Total Amount Spent': 'totalAmountSpent',\n    'Budget Spent': 'budgetSpent',\n    'Budget Status': 'budgetStatus',\n    'Budget Status Category': 'budgetStatusCategory',\n    'Location': 'location',\n    'Amount received': 'amountReceived',\n    'CO Amount': 'coAmount',\n    'ProjectedGross Margin (%)': 'projectedGrossMargin',\n    'Actual GrossMargin (%)': 'actualGrossMargin',\n    '% Deviation of the Profit Margin': 'deviationProfitMargin'\n  },\n  \n  // Column mappings for Portfolio sheet (activities/milestones/risks)\n  portfolioColumnMapping: {\n    'Project Code': 'projectCode',\n    'Item': 'item',\n    'Description': 'description',\n    'Owner': 'owner',\n    'Start Date': 'startDate',\n    'Finish Date': 'finishDate',\n    'Percentage Complete': 'percentageComplete',\n    'Category': 'category',\n    'Predecessor': 'predecessor',\n    'Status': 'status'\n  }\n};\nconst portfolioColumnMapping= {\n    'Project Code': 'projectCode',\n    'Item': 'item',\n    'Description': 'description',\n    'Owner': 'owner',\n    'Start Date': 'startDate',\n    'Finish Date': 'finishDate',\n    'Percentage Complete': 'percentageComplete',\n    'Category': 'category',\n    'Predecessor': 'predecessor',\n    'Status': 'status'\n  }\n// Sample activities data for the second Excel file\nconst SAMPLE_ACTIVITIES_DATA: ExcelActivity[] = [\n  {\n    id: 1,\n    projectCode: '51397',\n    item: 'Completion of Nairobi Site',\n    description: '',\n    owner: '',\n    startDate: '2025-08-14',\n    finishDate: '2025-08-14',\n    percentageComplete: 1.0,\n    category: 'Upcoming',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 2,\n    projectCode: '51397',\n    item: 'ELDORET',\n    description: '',\n    owner: '',\n    startDate: '2025-08-19',\n    finishDate: '2025-09-15',\n    percentageComplete: 0.0,\n    category: 'Upcoming',\n    predecessor: 'Completion of Nairobi Site',\n    status: ''\n  },\n  {\n    id: 3,\n    projectCode: '51397',\n    item: 'Mobilization',\n    description: '',\n    owner: '',\n    startDate: '2025-08-19',\n    finishDate: '2025-08-19',\n    percentageComplete: 0.0,\n    category: 'Upcoming',\n    predecessor: 'ELDORET',\n    status: ''\n  },\n  {\n    id: 4,\n    projectCode: '51397',\n    item: 'MOMBASA',\n    description: '',\n    owner: '',\n    startDate: '2025-06-03',\n    finishDate: '2025-07-22',\n    percentageComplete: 0.18,\n    category: 'Late',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 5,\n    projectCode: '51397',\n    item: 'Installation works',\n    description: '',\n    owner: '',\n    startDate: '2025-07-15',\n    finishDate: '2025-07-18',\n    percentageComplete: 0.0,\n    category: 'Late',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 6,\n    projectCode: '51397',\n    item: 'Construction',\n    description: '',\n    owner: '',\n    startDate: null,\n    finishDate: null,\n    percentageComplete: 0.77,\n    category: 'Workstream',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 7,\n    projectCode: '51397',\n    item: 'Commissioning',\n    description: '',\n    owner: '',\n    startDate: null,\n    finishDate: null,\n    percentageComplete: 0.0,\n    category: 'Workstream',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 8,\n    projectCode: '51397',\n    item: 'Procurement',\n    description: '',\n    owner: '',\n    startDate: null,\n    finishDate: null,\n    percentageComplete: 1.0,\n    category: 'Workstream',\n    predecessor: '',\n    status: ''\n  },\n  {\n    id: 9,\n    projectCode: '51397',\n    item: 'Material delivery delay',\n    description: 'High',\n    owner: 'Procurement',\n    startDate: '2025-08-20',\n    finishDate: null,\n    percentageComplete: null,\n    category: 'Risk',\n    predecessor: '',\n    status: 'Open'\n  },\n  {\n    id: 10,\n    projectCode: '51397',\n    item: 'Safety inspection concerns',\n    description: 'Medium',\n    owner: 'Safety',\n    startDate: '2025-08-21',\n    finishDate: null,\n    percentageComplete: null,\n    category: 'Risk',\n    predecessor: '',\n    status: 'Closed'\n  }\n];\n\n// Sample data for when Excel file is not available\nconst SAMPLE_DATA: ExcelProject[] = [\n  {\n    id: 1,\n    projectCode: '51397',\n    description: 'Supply of Pressure Gauges and Pressure Transmitters',\n    startDate: '2025-04-17',\n    finishDate: '2025-06-30',\n    percentageComplete: 0.34,\n    category: '',\n    scopeCompletion: 0.34,\n    timeCompletion: 162.16,\n    performanceIndex: 0.8,\n    performanceCategory: 'Slightly Behind',\n    priority: '',\n    issuesRisks: 5,\n    division: 'Instrumentation',\n    budgetAmount: 1644805.41,\n    totalAmountSpent: 4961.538462,\n    budgetSpent: 331.511168,\n    budgetStatus: 'Within Budget',\n    budgetStatusCategory: 'Within Budget',\n    location: '[(-3.9389, 39.7419)]',\n    amountReceived: 4874356.137,\n    coAmount: 2088639.00,\n    projectedGrossMargin: 0.212498948,\n    actualGrossMargin: 0.999841279,\n    deviationProfitMargin: 0.787342331\n  },\n  {\n    id: 2,\n    projectCode: '51419',\n    description: 'Supply, Installation and Commissioning of Overfill Protection System',\n    startDate: '2025-04-12',\n    finishDate: '2025-08-31',\n    percentageComplete: 0.45,\n    category: '',\n    scopeCompletion: 0.45,\n    timeCompletion: 88.65,\n    performanceIndex: 0.8,\n    performanceCategory: 'Critical Delay',\n    priority: '',\n    issuesRisks: 6,\n    division: 'Instrumentation',\n    budgetAmount: 1308312.456,\n    totalAmountSpent: 101075,\n    budgetSpent: 12.94397681,\n    budgetStatus: 'Over Budget',\n    budgetStatusCategory: 'Over Budget',\n    location: '[(-0.4571, 39.6434), (-3.9389, 39.7419)]',\n    amountReceived: 84899826.76,\n    coAmount: 4922287.47,\n    projectedGrossMargin: 0.734206411,\n    actualGrossMargin: 0.99999737,\n    deviationProfitMargin: 0.26579096\n  },\n  {\n    id: 3,\n    projectCode: '51415',\n    description: 'Special Stringing Works At Timau Sand Pro Farm Between Tower T97-T99 (Completion Of Nanyuki - Isiolo 132kv Transmission Line)',\n    startDate: '2025-04-15',\n    finishDate: '2025-07-31',\n    percentageComplete: 0.23,\n    category: '',\n    scopeCompletion: 0.23,\n    timeCompletion: 114.02,\n    performanceIndex: 0.8,\n    performanceCategory: 'Critical Delay',\n    priority: '',\n    issuesRisks: 7,\n    division: 'Electrical',\n    budgetAmount: 3355000,\n    totalAmountSpent: 2805000,\n    budgetSpent: 1.196078431,\n    budgetStatus: 'Critically Over Budget',\n    budgetStatusCategory: 'Critically Over Budget',\n    location: '[(-0.0917, 34.7680), (-0.3031, 36.0800)]',\n    amountReceived: 89249.16,\n    coAmount: 30201464.00,\n    projectedGrossMargin: 0.88891267,\n    actualGrossMargin: 0.99999996,\n    deviationProfitMargin: 0.11108729\n  },\n  {\n    id: 4,\n    projectCode: '51414',\n    description: 'Supply of ASCO Pilot Repair Kit',\n    startDate: '2025-04-10',\n    finishDate: '2025-07-17',\n    percentageComplete: 0.12,\n    category: '',\n    scopeCompletion: 0.12,\n    timeCompletion: 129.59,\n    performanceIndex: 0.8,\n    performanceCategory: 'Slightly Behind',\n    priority: '',\n    issuesRisks: 9,\n    division: 'Mechanical',\n    budgetAmount: 271617.97,\n    totalAmountSpent: 17049.16,\n    budgetSpent: 15.93145762,\n    budgetStatus: 'Within Budget',\n    budgetStatusCategory: 'Within Budget',\n    location: '[(-0.3031, 36.0800), (0.5143, 35.2698), (0.0167, 37.0728)]',\n    amountReceived: 916329.5,\n    coAmount: 713232.00,\n    projectedGrossMargin: 0.619173046,\n    actualGrossMargin: 0.999977663,\n    deviationProfitMargin: 0.380804617\n  },\n  {\n    id: 5,\n    projectCode: '51413',\n    description: 'Supply and Installation of ATG for Lower Tank Farm',\n    startDate: '2025-04-01',\n    finishDate: '2025-08-18',\n    percentageComplete: 0.45,\n    category: '',\n    scopeCompletion: 0.45,\n    timeCompletion: 97.84,\n    performanceIndex: 0.8,\n    performanceCategory: 'On Track',\n    priority: '',\n    issuesRisks: 12,\n    division: 'Instrumentation',\n    budgetAmount: 15961819.55,\n    totalAmountSpent: 14343197.35,\n    budgetSpent: 1.112849469,\n    budgetStatus: 'Critically Over Budget',\n    budgetStatusCategory: 'Critically Over Budget',\n    location: '',\n    amountReceived: 191166.4,\n    coAmount: 0,\n    projectedGrossMargin: 0,\n    actualGrossMargin: 0,\n    deviationProfitMargin: 0\n  }\n];\n\n// Function to read Projects sheet and convert to our schema\nfunction readProjectsSheet(): ExcelProject[] {\n  try {\n    if (!fs.existsSync(DATA_SOURCE_CONFIG.filePath)) {\n      console.log('Excel file not found, using sample data');\n      return SAMPLE_DATA;\n    }\n\n    const workbook = XLSX.readFile(DATA_SOURCE_CONFIG.filePath);\n    const worksheet = workbook.Sheets[\"Portfolio\"] \n    \n    if (!worksheet) {\n      console.error(`Projects sheet \"${DATA_SOURCE_CONFIG.projectsSheetName}\" not found, using sample data`);\n      return SAMPLE_DATA;\n    }\n\n    const jsonData = XLSX.utils.sheet_to_json(worksheet);\n    \n    return jsonData.map((row: any, index: number) => {\n      const mappedRow: any = { id: index + 1 };\n      \n      // Map Excel columns to our schema\n      Object.entries(DATA_SOURCE_CONFIG.columnMapping).forEach(([excelCol, schemaCol]) => {\n        let value = row[excelCol];\n        \n        // Handle data type conversions\n        if (['percentageComplete', 'scopeCompletion', 'timeCompletion', 'performanceIndex', 'budgetAmount', 'totalAmountSpent', 'budgetSpent', 'amountReceived', 'coAmount', 'projectedGrossMargin', 'actualGrossMargin', 'deviationProfitMargin'].includes(schemaCol)) {\n          value = typeof value === 'string' ? parseFloat(value) || 0 : value || 0;\n        } else if (schemaCol === 'issuesRisks') {\n          value = typeof value === 'string' ? parseInt(value) || 0 : value || 0;\n        } else if (['startDate', 'finishDate'].includes(schemaCol)) {\n          value = value instanceof Date ? value.toISOString().split('T')[0] : value;\n        }\n        \n        mappedRow[schemaCol] = value || '';\n      });\n\n      // Calculate derived fields if missing\n      if (!mappedRow.budgetStatusCategory && mappedRow.budgetAmount && mappedRow.totalAmountSpent) {\n        mappedRow.budgetStatusCategory = calculateBudgetStatusCategory(mappedRow.budgetAmount, mappedRow.totalAmountSpent);\n      }\n\n      return mappedRow as ExcelProject;\n    });\n    \n  } catch (error) {\n    console.error('Error reading Projects sheet:', error);\n    return SAMPLE_DATA;\n  }\n}\n\n// Function to read Portfolio sheet and convert to activities schema\nfunction readPortfolioSheet(): ExcelActivity[] {\n  try {\n    if (!fs.existsSync(DATA_SOURCE_CONFIG.filePath)) {\n      console.log('Excel file not found, using sample activities data');\n      return SAMPLE_ACTIVITIES_DATA;\n    }\n\n    const workbook = XLSX.readFile(DATA_SOURCE_CONFIG.filePath);\n    const worksheet = workbook.Sheets[\"Projects\"] \n      console.log(`Portfolio sheet \"${\"projects\"}\" found, using sample activities data`);\n    \n    if (!worksheet) {\n      console.error(`Portfolio sheet \"${DATA_SOURCE_CONFIG.portfolioSheetName}\" not found, using sample activities data`);\n      return SAMPLE_ACTIVITIES_DATA;\n    }\n\n    const jsonData = XLSX.utils.sheet_to_json(worksheet);\n    \n    return jsonData.map((row: any, index: number) => {\n      const mappedRow: any = { id: index + 1 };\n      \n      // Map Excel columns to our activities schema\n      Object.entries(portfolioColumnMapping).forEach(([excelCol, schemaCol]) => {\n        let value = row[excelCol];\n        \n        // Handle data type conversions\n        if (schemaCol === 'percentageComplete') {\n          value = typeof value === 'string' ? parseFloat(value) || 0 : value || 0;\n        } else if (['startDate', 'finishDate'].includes(schemaCol)) {\n          value = value instanceof Date ? value.toISOString().split('T')[0] : value;\n        }\n        \n        mappedRow[schemaCol] = value || '';\n      });\n\n      return mappedRow as ExcelActivity;\n    });\n    \n  } catch (error) {\n    console.error('Error reading Portfolio sheet:', error);\n    return SAMPLE_ACTIVITIES_DATA;\n  }\n}\n\n// Data service class\nexport class ExcelDataService {\n  private data: ExcelProject[] = [];\n  private activitiesData: ExcelActivity[] = [];\n  \n  constructor() {\n    this.loadData();\n    this.loadActivitiesData();\n  }\n  \n  private loadData() {\n    this.data = readProjectsSheet();\n    console.log(`Loaded ${this.data.length} projects from portfolio sheet`);\n  }\n\n  private loadActivitiesData() {\n    this.activitiesData = readPortfolioSheet();\n    console.log(`Loaded ${this.activitiesData.length} activities from project sheet`);\n  }\n  \n  // Reload data (useful for when Excel file is updated)\n  reloadData() {\n    this.loadData();\n    this.loadActivitiesData();\n  }\n  \n  // Get all projects with optional filters\n  getProjects(filters?: {\n    status?: string;\n    division?: string;\n    dateFrom?: string;\n    dateTo?: string;\n  }): ExcelProject[] {\n    let filteredData = [...this.data];\n    \n    if (filters) {\n      if (filters.division && filters.division !== 'all' && filters.division !== '') {\n        filteredData = filteredData.filter(p => \n          p.division.toLowerCase() === filters.division!.toLowerCase()\n        );\n      }\n      \n      if (filters.dateFrom && filters.dateFrom !== '') {\n        filteredData = filteredData.filter(p => \n          new Date(p.startDate) >= new Date(filters.dateFrom!)\n        );\n      }\n      \n      if (filters.dateTo && filters.dateTo !== '') {\n        filteredData = filteredData.filter(p => \n          new Date(p.finishDate) <= new Date(filters.dateTo!)\n        );\n      }\n    }\n    return filteredData;\n  }\n  \n  // Get project by ID\n  getProjectById(id: string): ExcelProject | undefined {\n\n    return this.data.find(p => p.projectCode.toString() === id || p.id.toString() === id);\n  }\n  \n  // Get overview statistics\n  getOverviewStats(): any {\n    const total = this.data.length;\n    \n    // Sum only valid numeric values, excluding NaN, null, undefined, or empty strings\n    const totalBudget = this.data.reduce((sum, p) => {\n      const amount = typeof p.budgetAmount === 'number' && !isNaN(p.budgetAmount) ? p.budgetAmount : 0;\n      return sum + amount;\n    }, 0);\n    \n    const actualSpend = this.data.reduce((sum, p) => {\n      const amount = typeof p.totalAmountSpent === 'number' && !isNaN(p.totalAmountSpent) ? p.totalAmountSpent : 0;\n      return sum + amount;\n    }, 0);\n    \n    const amountReceived = this.data.reduce((sum, p) => {\n      // Handle cases where amountReceived might be empty string or invalid\n      let amount = 0;\n      if (typeof p.amountReceived === 'number' && !isNaN(p.amountReceived)) {\n        amount = p.amountReceived;\n      } else if (typeof p.amountReceived === 'string' && p.amountReceived !== '') {\n        const parsed = parseFloat(p.amountReceived);\n        amount = isNaN(parsed) ? 0 : parsed;\n      }\n      return sum + amount;\n    }, 0);\n    \n    const totalRisks = this.data.reduce((sum, p) => {\n      const risks = typeof p.issuesRisks === 'number' && !isNaN(p.issuesRisks) ? p.issuesRisks : 0;\n      return sum + risks;\n    }, 0);\n    \n    return {\n      totalProjects: total,\n      totalBudget,\n      actualSpend,\n      amountReceived,\n      totalRisks\n    };\n  }\n  \n  // Get performance category statistics for pie chart\n  getPerformanceCategoryStats(): any {\n    const categories: Record<string, number> = {\n      'On Track': 0,\n      'Slightly Behind': 0,\n      'Critical Delay': 0,\n      'Ahead of Schedule': 0\n    };\n    \n    this.data.forEach(project => {\n      const category = project.performanceCategory || 'On Track';\n      if (category in categories) {\n        categories[category]++;\n      }\n    });\n    \n    return categories;\n  }\n  \n  // Get spending categories data for pie chart\n  getSpendingCategoriesStats(): any {\n    const categories: Record<string, number> = {\n      'Under Budget': 0,\n      'Within Budget': 0,\n      'Over Budget': 0,\n      'Critically Over Budget': 0\n    };\n    \n    this.data.forEach(project => {\n      const category = project.budgetStatusCategory || 'Within Budget';\n      if (category in categories) {\n        categories[category]++;\n      }\n    });\n    \n    return categories;\n  }\n  \n  // Get division data for bar chart\n  getDivisionStats(): any {\n    const divisions: Record<string, number> = {};\n    \n    this.data.forEach(project => {\n      const division = project.division || 'Other';\n      divisions[division] = (divisions[division] || 0) + 1;\n    });\n    \n    return divisions;\n  }\n  \n  // Get all project locations for mapping\n  getAllProjectLocations(): Array<{id: string, name: string, code: string, locations: Array<{lat: number, lng: number}>}> {\n    const result: Array<{id: string, name: string, code: string, locations: Array<{lat: number, lng: number}>}> = [];\n    this.data.forEach(project => {\n      const locations = parseLocation(project.location || '');\n      locations.forEach(loc => {\n      result.push({\n        id: project.id.toString(),\n        name: project.description,\n        code: project.projectCode,\n        locations: [loc]\n      });\n      });\n    });\n    return result;\n  }\n\n  // Get activities by project code\n  getActivitiesByProjectCode(projectCode: string): ExcelActivity[] {\n  return this.activitiesData.filter(activity => activity.projectCode.toLocaleString() === projectCode);\n  }\n\n  // Get activities by project code and category\n  getActivitiesByCategory(projectCode: string, category: string): ExcelActivity[] {\n    return this.activitiesData.filter(activity =>\n      String(activity.projectCode) === String(projectCode) && activity.category === category\n    );\n  }\n\n  // Get milestones (Workstream category)\n  getMilestonesByProjectCode(projectCode: string): ExcelActivity[] {\n    return this.getActivitiesByCategory(projectCode, 'Workstream');\n  }\n\n  // Get risks (Risk category)\n  getRisksByProjectCode(projectCode: string): ExcelActivity[] {\n    return this.getActivitiesByCategory(projectCode, 'Risk');\n  }\n\n  // Get upcoming activities (Upcoming category)\n  getUpcomingActivitiesByProjectCode(projectCode: string): ExcelActivity[] {\n    return this.getActivitiesByCategory(projectCode, 'Upcoming');\n  }\n\n  // Get late activities (Late category)\n  getLateActivitiesByProjectCode(projectCode: string): ExcelActivity[] {\n    return this.getActivitiesByCategory(projectCode, 'Late');\n  }\n}\n\n// Export singleton instance\nexport const excelDataService = new ExcelDataService();","size_bytes":19478},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport { excelDataService } from \"./excel-data-service\";\nimport { parseLocation, calculateBudgetStatusCategory, calculatePerformanceStatus } from \"@shared/excel-schema\";\n\n// AI Insight Generation Functions\nfunction generatePortfolioInsights(data: any) {\n  const { projects, stats, performanceStats, spendingStats, divisionStats } = data;\n  \n  const insights = [];\n  \n  // Budget Analysis\n  const budgetUtilization = (stats.actualSpend / stats.totalBudget * 100).toFixed(1);\n  insights.push({\n    type: \"financial\",\n    title: \"Budget Performance\",\n    content: `Portfolio shows ${budgetUtilization}% budget utilization across ${stats.totalProjects} active projects. ${spendingStats['Critically Over Budget']} projects are critically over budget, requiring immediate attention.`,\n    priority: spendingStats['Critically Over Budget'] > 0 ? \"high\" : \"medium\",\n    icon: \"💰\"\n  });\n  \n  // Schedule Performance\n  const delayedProjects = performanceStats['Critical Delay'] + performanceStats['Slightly Behind'];\n  const onTrackPercentage = ((performanceStats['On Track'] + performanceStats['Ahead of Schedule']) / stats.totalProjects * 100).toFixed(1);\n  insights.push({\n    type: \"schedule\",\n    title: \"Schedule Health\",\n    content: `${onTrackPercentage}% of projects are on track or ahead. ${delayedProjects} projects experiencing delays need schedule recovery actions.`,\n    priority: delayedProjects > stats.totalProjects * 0.3 ? \"high\" : \"medium\",\n    icon: \"📅\"\n  });\n  \n  // Division Analysis  \n  const topDivision = Object.entries(divisionStats).reduce((a, b) => (a[1] as number) > (b[1] as number) ? a : b);\n  insights.push({\n    type: \"operations\", \n    title: \"Division Focus\",\n    content: `${topDivision[0]} division leads with ${topDivision[1]} projects (${((topDivision[1] as number)/stats.totalProjects*100).toFixed(1)}%). Consider resource rebalancing if bottlenecks emerge.`,\n    priority: \"low\",\n    icon: \"🏗️\"\n  });\n  \n  // Risk Assessment\n  const avgRiskPerProject = (stats.totalRisks / stats.totalProjects).toFixed(1);\n  insights.push({\n    type: \"risk\",\n    title: \"Risk Exposure\",\n    content: `Average ${avgRiskPerProject} risks per project. Projects with >5 risks need enhanced risk management protocols.`,\n    priority: parseInt(avgRiskPerProject) > 3 ? \"high\" : \"medium\", \n    icon: \"⚠️\"\n  });\n  \n  return {\n    insights,\n    summary: `Portfolio of ${stats.totalProjects} projects with ${formatCurrency(stats.totalBudget)} total budget. Key focus areas: ${delayedProjects > 0 ? 'schedule recovery, ' : ''}${spendingStats['Critically Over Budget'] > 0 ? 'budget control, ' : ''}risk mitigation.`,\n    lastUpdated: new Date().toISOString()\n  };\n}\n\nfunction generateProjectInsights(data: any) {\n  const { project, activities, milestones, risks, upcoming, late } = data;\n  \n  const insights = [];\n  \n  // Budget Analysis\n  const budgetVariance = ((project.totalAmountSpent - project.budgetAmount) / project.budgetAmount * 100).toFixed(1);\n  const budgetVarianceNum = parseFloat(budgetVariance);\n  insights.push({\n    type: \"financial\",\n    title: \"Budget Status\", \n    content: `Project is ${budgetVarianceNum > 0 ? 'over' : 'under'} budget by ${Math.abs(budgetVarianceNum)}%. Current spend: ${formatCurrency(project.totalAmountSpent)} vs Budget: ${formatCurrency(project.budgetAmount)}.`,\n    priority: Math.abs(budgetVarianceNum) > 10 ? \"high\" : \"medium\",\n    icon: \"💰\"\n  });\n  \n  // Schedule Analysis\n  const progressVsTime = (project.percentageComplete * 100).toFixed(1);\n  insights.push({\n    type: \"schedule\",\n    title: \"Progress Analysis\",\n    content: `Project ${progressVsTime}% complete. Performance category: ${project.performanceCategory}. ${late.length} activities are running late.`,\n    priority: project.performanceCategory?.includes('Critical') ? \"high\" : \"medium\", \n    icon: \"📈\"\n  });\n  \n  // Risk Analysis\n  insights.push({\n    type: \"risk\",\n    title: \"Risk Assessment\",\n    content: `${project.issuesRisks} total risks identified. ${risks.filter((r: any) => r.status === 'Open').length} open risks require monitoring.`,\n    priority: project.issuesRisks > 5 ? \"high\" : \"low\",\n    icon: \"⚠️\"\n  });\n  \n  // Milestone Analysis\n  const completedMilestones = milestones.filter((m: any) => m.percentageComplete === 1).length;\n  insights.push({\n    type: \"operations\",\n    title: \"Milestone Progress\", \n    content: `${completedMilestones}/${milestones.length} milestones completed. ${upcoming.length} upcoming activities scheduled.`,\n    priority: \"medium\",\n    icon: \"🎯\"\n  });\n  \n  return {\n    insights,\n    summary: `${project.description} - ${progressVsTime}% complete, ${project.performanceCategory.toLowerCase()}. Focus on ${late.length > 0 ? 'schedule recovery and ' : ''}${Math.abs(parseFloat(budgetVariance)) > 10 ? 'budget control.' : 'maintaining momentum.'}`,\n    lastUpdated: new Date().toISOString()\n  };\n}\n\nfunction formatCurrency(amount: number) {\n  if (!amount || isNaN(amount)) return '$0';\n  if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;\n  if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;\n  return `$${amount.toLocaleString()}`;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all projects with optional filters\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const { status, division, dateFrom, dateTo } = req.query;\n      const projects = excelDataService.getProjects({\n        status: status as string,\n        division: division as string,\n        dateFrom: dateFrom as string,\n        dateTo: dateTo as string,\n      });\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  // Get project statistics (must be before :id route)\n  app.get(\"/api/projects/stats/overview\", async (req, res) => {\n    try {\n      const stats = excelDataService.getOverviewStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project statistics\" });\n    }\n  });\n\n  // Get performance category statistics for pie chart\n  app.get(\"/api/projects/stats/performance\", async (req, res) => {\n    try {\n      const stats = excelDataService.getPerformanceCategoryStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch performance statistics\" });\n    }\n  });\n\n  // Get spending categories statistics for pie chart\n  app.get(\"/api/projects/stats/spending\", async (req, res) => {\n    try {\n      const stats = excelDataService.getSpendingCategoriesStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch spending statistics\" });\n    }\n  });\n\n  // Get division statistics for bar chart\n  app.get(\"/api/projects/stats/divisions\", async (req, res) => {\n    try {\n      const stats = excelDataService.getDivisionStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch division statistics\" });\n    }\n  });\n\n  // Get project locations for map (must be before :id route)\n  app.get(\"/api/projects/locations\", async (req, res) => {\n    try {\n      const locations = excelDataService.getAllProjectLocations();\n      res.json(locations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project locations\" });\n    }\n  });\n\n  // Reload Excel data (must be before :id route)\n  app.post(\"/api/projects/reload\", async (req, res) => {\n    try {\n      excelDataService.reloadData();\n      res.json({ message: \"Data reloaded successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reload data\" });\n    }\n  });\n\n  // Get activities by project code\n  app.get(\"/api/projects/:projectCode/activities\", async (req, res) => {\n    try {\n      const activities = excelDataService.getActivitiesByProjectCode(req.params.projectCode);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project activities\" });\n    }\n  });\n\n  // Get milestones by project code  \n  app.get(\"/api/projects/:projectCode/milestones\", async (req, res) => {\n    try {\n      const milestones = excelDataService.getMilestonesByProjectCode(req.params.projectCode);\n      res.json(milestones);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project milestones\" });\n    }\n  });\n\n  // Get risks by project code\n  app.get(\"/api/projects/:projectCode/risks\", async (req, res) => {\n    try {\n      const risks = excelDataService.getRisksByProjectCode(req.params.projectCode);\n      res.json(risks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project risks\" });\n    }\n  });\n\n  // Get upcoming activities by project code\n  app.get(\"/api/projects/:projectCode/upcoming\", async (req, res) => {\n    try {\n      const upcoming = excelDataService.getUpcomingActivitiesByProjectCode(req.params.projectCode);\n      console.log(\"Upcoming activities:\", upcoming);\n      res.json(upcoming);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch upcoming activities\" });\n    }\n  });\n\n  // Get late activities by project code\n  app.get(\"/api/projects/:projectCode/late\", async (req, res) => {\n    try {\n      const late = excelDataService.getLateActivitiesByProjectCode(req.params.projectCode);\n      res.json(late);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch late activities\" });\n    }\n  });\n\n  // Get single project by ID (must be after specific routes)\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = excelDataService.getProjectById(req.params.id);\n      console.log(\"Fetching project with ID:\", req.params.id,\"project\",project);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found. Please check the ID and try again.\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Create new project\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  // Update project\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, validatedData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  // Delete project\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // AI Insights for Portfolio/Dashboard\n  app.get(\"/api/ai/insights/portfolio\", async (req, res) => {\n    try {\n      const projects = excelDataService.getProjects();\n      const stats = excelDataService.getOverviewStats();\n      const performanceStats = excelDataService.getPerformanceCategoryStats();\n      const spendingStats = excelDataService.getSpendingCategoriesStats();\n      const divisionStats = excelDataService.getDivisionStats();\n      \n      // Generate AI insights based on data\n      const insights = generatePortfolioInsights({\n        projects,\n        stats,\n        performanceStats,\n        spendingStats,\n        divisionStats\n      });\n      \n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate portfolio insights\" });\n    }\n  });\n\n  // AI Insights for Individual Project\n  app.get(\"/api/ai/insights/project/:projectCode\", async (req, res) => {\n    try {\n      const project = excelDataService.getProjectById(req.params.projectCode);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      const activities = excelDataService.getActivitiesByProjectCode(req.params.projectCode);\n      const milestones = excelDataService.getMilestonesByProjectCode(req.params.projectCode);\n      const risks = excelDataService.getRisksByProjectCode(req.params.projectCode);\n      const upcoming = excelDataService.getUpcomingActivitiesByProjectCode(req.params.projectCode);\n      const late = excelDataService.getLateActivitiesByProjectCode(req.params.projectCode);\n      \n      // Generate AI insights for individual project\n      const insights = generateProjectInsights({\n        project,\n        activities,\n        milestones,\n        risks,\n        upcoming,\n        late\n      });\n      \n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate project insights\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13433},"server/storage.ts":{"content":"import { type Project, type InsertProject, type Milestone, type Risk } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Project CRUD\n  getProjects(filters?: {\n    status?: string;\n    division?: string;\n    dateFrom?: string;\n    dateTo?: string;\n  }): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n  \n  // Project statistics\n  getProjectStats(): Promise<{\n    totalProjects: number;\n    activeProjects: number;\n    completedProjects: number;\n    delayedProjects: number;\n    totalBudget: number;\n    actualSpend: number;\n    amountReceived: number;\n  }>;\n  \n  // Chart data\n  getSpendingCategoriesData(): Promise<{\n    underBudget: number;\n    withinBudget: number;\n    overspent: number;\n    criticalOverspent: number;\n  }>;\n  \n  getProjectStatusData(): Promise<{\n    aheadOfSchedule: number;\n    onTrack: number;\n    slightlyBehind: number;\n    criticalDelay: number;\n  }>;\n  \n  getDivisionData(): Promise<{\n    mechanical: number;\n    electrical: number;\n    instrumentation: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project>;\n\n  constructor() {\n    this.projects = new Map();\n    this.seedData();\n  }\n\n  private seedData() {\n    const sampleProjects: Project[] = [\n      {\n        id: \"1\",\n        code: \"PRJ-001\",\n        name: \"Power Plant Modernization\",\n        description: \"Modernization of existing power plant infrastructure\",\n        status: \"active\",\n        division: \"mechanical\",\n        manager: \"John Smith\",\n        startDate: new Date(\"2024-01-15\"),\n        endDate: new Date(\"2024-09-30\"),\n        budget: \"1500000\",\n        actualSpend: \"1125000\",\n        commitments: \"200000\",\n        forecast: \"1475000\",\n        amountReceived: \"1200000\",\n        percentComplete: 75,\n        elapsedDays: 230,\n        totalPlannedDays: 300,\n        budgetVarianceCategory: \"within_budget\",\n        riskCount: 3,\n        plannedRevenue: \"1800000\",\n        plannedCost: \"1500000\",\n        actualRevenue: \"1350000\",\n        actualCost: \"1125000\",\n        performanceMetrics: {\n          ev: 1125000,\n          pv: 1150000,\n          ac: 1125000,\n          cpi: 1.02,\n          spi: 0.98,\n          cv: 0,\n          sv: -25000\n        },\n        milestones: [\n          { id: \"1\", name: \"Design Phase Complete\", status: \"completed\", date: \"2024-03-15\" },\n          { id: \"2\", name: \"Procurement Complete\", status: \"completed\", date: \"2024-05-20\" },\n          { id: \"3\", name: \"Installation Phase\", status: \"in_progress\", date: \"2024-08-15\" },\n          { id: \"4\", name: \"Testing & Commissioning\", status: \"pending\", date: \"2024-09-30\" }\n        ],\n        risks: [\n          { id: \"1\", title: \"Supply Chain Delays\", severity: \"medium\", owner: \"Sarah Johnson\", status: \"open\" },\n          { id: \"2\", title: \"Equipment Compatibility\", severity: \"high\", owner: \"Mike Davis\", status: \"in_progress\" },\n          { id: \"3\", title: \"Weather Conditions\", severity: \"low\", owner: \"Alex Chen\", status: \"mitigated\" }\n        ],\n        upcomingActivities: [\n          { id: \"1\", name: \"Equipment Installation\", date: \"2024-12-15\" },\n          { id: \"2\", name: \"Safety Inspection\", date: \"2024-12-20\" },\n          { id: \"3\", name: \"Team Training Session\", date: \"2024-12-28\" }\n        ],\n        createdAt: new Date(\"2024-01-10\"),\n        updatedAt: new Date(\"2024-12-01\")\n      },\n      {\n        id: \"2\",\n        code: \"PRJ-002\",\n        name: \"Control System Upgrade\",\n        description: \"Upgrade of industrial control systems\",\n        status: \"active\",\n        division: \"electrical\",\n        manager: \"Jane Wilson\",\n        startDate: new Date(\"2024-03-01\"),\n        endDate: new Date(\"2024-10-15\"),\n        budget: \"800000\",\n        actualSpend: \"450000\",\n        commitments: \"150000\",\n        forecast: \"780000\",\n        amountReceived: \"500000\",\n        percentComplete: 45,\n        elapsedDays: 90,\n        totalPlannedDays: 200,\n        budgetVarianceCategory: \"overspent\",\n        riskCount: 5,\n        plannedRevenue: \"950000\",\n        plannedCost: \"800000\",\n        actualRevenue: \"500000\",\n        actualCost: \"450000\",\n        performanceMetrics: {\n          ev: 360000,\n          pv: 320000,\n          ac: 450000,\n          cpi: 0.80,\n          spi: 1.13,\n          cv: -90000,\n          sv: 40000\n        },\n        milestones: [],\n        risks: [],\n        upcomingActivities: [],\n        createdAt: new Date(\"2024-02-20\"),\n        updatedAt: new Date(\"2024-12-01\")\n      },\n      {\n        id: \"3\",\n        code: \"PRJ-003\",\n        name: \"Safety Systems Installation\",\n        description: \"Installation of new safety systems\",\n        status: \"completed\",\n        division: \"instrumentation\",\n        manager: \"Robert Brown\",\n        startDate: new Date(\"2024-01-01\"),\n        endDate: new Date(\"2024-05-01\"),\n        budget: \"650000\",\n        actualSpend: \"620000\",\n        commitments: \"0\",\n        forecast: \"620000\",\n        amountReceived: \"650000\",\n        percentComplete: 100,\n        elapsedDays: 120,\n        totalPlannedDays: 120,\n        budgetVarianceCategory: \"under_budget\",\n        riskCount: 0,\n        plannedRevenue: \"780000\",\n        plannedCost: \"650000\",\n        actualRevenue: \"780000\",\n        actualCost: \"620000\",\n        performanceMetrics: {\n          ev: 650000,\n          pv: 650000,\n          ac: 620000,\n          cpi: 1.05,\n          spi: 1.00,\n          cv: 30000,\n          sv: 0\n        },\n        milestones: [],\n        risks: [],\n        upcomingActivities: [],\n        createdAt: new Date(\"2023-12-15\"),\n        updatedAt: new Date(\"2024-05-01\")\n      },\n      {\n        id: \"4\",\n        code: \"PRJ-004\",\n        name: \"Turbine Maintenance\",\n        description: \"Major turbine maintenance and repairs\",\n        status: \"delayed\",\n        division: \"mechanical\",\n        manager: \"Lisa Garcia\",\n        startDate: new Date(\"2024-10-01\"),\n        endDate: new Date(\"2024-12-30\"),\n        budget: \"400000\",\n        actualSpend: \"250000\",\n        commitments: \"100000\",\n        forecast: \"600000\",\n        amountReceived: \"300000\",\n        percentComplete: 30,\n        elapsedDays: 45,\n        totalPlannedDays: 90,\n        budgetVarianceCategory: \"critical_overspent\",\n        riskCount: 7,\n        plannedRevenue: \"480000\",\n        plannedCost: \"400000\",\n        actualRevenue: \"300000\",\n        actualCost: \"250000\",\n        performanceMetrics: {\n          ev: 120000,\n          pv: 200000,\n          ac: 250000,\n          cpi: 0.48,\n          spi: 0.60,\n          cv: -130000,\n          sv: -80000\n        },\n        milestones: [],\n        risks: [],\n        upcomingActivities: [],\n        createdAt: new Date(\"2024-09-15\"),\n        updatedAt: new Date(\"2024-12-01\")\n      }\n    ];\n\n    sampleProjects.forEach(project => {\n      this.projects.set(project.id, project);\n    });\n  }\n\n  async getProjects(filters?: {\n    status?: string;\n    division?: string;\n    dateFrom?: string;\n    dateTo?: string;\n  }): Promise<Project[]> {\n    let projects = Array.from(this.projects.values());\n\n    if (filters) {\n      if (filters.status && filters.status !== 'all') {\n        projects = projects.filter(p => p.status === filters.status);\n      }\n      if (filters.division && filters.division !== 'all') {\n        projects = projects.filter(p => p.division === filters.division);\n      }\n      if (filters.dateFrom) {\n        const fromDate = new Date(filters.dateFrom);\n        projects = projects.filter(p => new Date(p.startDate) >= fromDate);\n      }\n      if (filters.dateTo) {\n        const toDate = new Date(filters.dateTo);\n        projects = projects.filter(p => new Date(p.endDate) <= toDate);\n      }\n    }\n\n    return projects;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = {\n      ...insertProject,\n      id,\n      description: insertProject.description || null,\n      actualSpend: insertProject.actualSpend || \"0\",\n      commitments: insertProject.commitments || \"0\",\n      forecast: insertProject.forecast || \"0\",\n      amountReceived: insertProject.amountReceived || \"0\",\n      plannedRevenue: insertProject.plannedRevenue || \"0\",\n      plannedCost: insertProject.plannedCost || \"0\",\n      actualRevenue: insertProject.actualRevenue || \"0\",\n      actualCost: insertProject.actualCost || \"0\",\n      percentComplete: insertProject.percentComplete || 0,\n      elapsedDays: insertProject.elapsedDays || 0,\n      riskCount: insertProject.riskCount || 0,\n      performanceMetrics: insertProject.performanceMetrics || null,\n      milestones: insertProject.milestones || null,\n      risks: insertProject.risks || null,\n      upcomingActivities: insertProject.upcomingActivities || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n\n    const updatedProject: Project = {\n      ...project,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  async getProjectStats(): Promise<{\n    totalProjects: number;\n    activeProjects: number;\n    completedProjects: number;\n    delayedProjects: number;\n    totalBudget: number;\n    actualSpend: number;\n    amountReceived: number;\n  }> {\n    const projects = Array.from(this.projects.values());\n    \n    return {\n      totalProjects: projects.length,\n      activeProjects: projects.filter(p => p.status === 'active').length,\n      completedProjects: projects.filter(p => p.status === 'completed').length,\n      delayedProjects: projects.filter(p => p.status === 'delayed').length,\n      totalBudget: projects.reduce((sum, p) => sum + parseFloat(p.budget), 0),\n      actualSpend: projects.reduce((sum, p) => sum + parseFloat(p.actualSpend), 0),\n      amountReceived: projects.reduce((sum, p) => sum + parseFloat(p.amountReceived), 0),\n    };\n  }\n\n  async getSpendingCategoriesData(): Promise<{\n    underBudget: number;\n    withinBudget: number;\n    overspent: number;\n    criticalOverspent: number;\n  }> {\n    const projects = Array.from(this.projects.values());\n    \n    return {\n      underBudget: projects.filter(p => p.budgetVarianceCategory === 'under_budget').length,\n      withinBudget: projects.filter(p => p.budgetVarianceCategory === 'within_budget').length,\n      overspent: projects.filter(p => p.budgetVarianceCategory === 'overspent').length,\n      criticalOverspent: projects.filter(p => p.budgetVarianceCategory === 'critical_overspent').length,\n    };\n  }\n\n  async getProjectStatusData(): Promise<{\n    aheadOfSchedule: number;\n    onTrack: number;\n    slightlyBehind: number;\n    criticalDelay: number;\n  }> {\n    const projects = Array.from(this.projects.values());\n    \n    // Calculate performance index for each project\n    const statusCounts = {\n      aheadOfSchedule: 0,\n      onTrack: 0,\n      slightlyBehind: 0,\n      criticalDelay: 0,\n    };\n\n    projects.forEach(project => {\n      const timePercent = project.elapsedDays / project.totalPlannedDays;\n      const completionPercent = project.percentComplete / 100;\n      const pi = completionPercent / timePercent;\n\n      if (pi >= 1.10) {\n        statusCounts.aheadOfSchedule++;\n      } else if (pi >= 0.90) {\n        statusCounts.onTrack++;\n      } else if (pi >= 0.75) {\n        statusCounts.slightlyBehind++;\n      } else {\n        statusCounts.criticalDelay++;\n      }\n    });\n\n    return statusCounts;\n  }\n\n  async getDivisionData(): Promise<{\n    mechanical: number;\n    electrical: number;\n    instrumentation: number;\n  }> {\n    const projects = Array.from(this.projects.values());\n    \n    return {\n      mechanical: projects.filter(p => p.division === 'mechanical').length,\n      electrical: projects.filter(p => p.division === 'electrical').length,\n      instrumentation: projects.filter(p => p.division === 'instrumentation').length,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12531},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/excel-schema.ts":{"content":"import { pgTable, text, real, integer, serial, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Excel-based project schema matching the provided structure\nexport const excelProjects = pgTable(\"excel_projects\", {\n  id: serial(\"id\").primaryKey(),\n  projectCode: text(\"project_code\").notNull(),\n  description: text(\"description\").notNull(),\n  startDate: date(\"start_date\").notNull(),\n  finishDate: date(\"finish_date\").notNull(),\n  percentageComplete: real(\"percentage_complete\").notNull(),\n  category: text(\"category\"),\n  scopeCompletion: real(\"scope_completion\"),\n  timeCompletion: real(\"time_completion\"),\n  performanceIndex: real(\"performance_index\"),\n  performanceCategory: text(\"performance_category\"),\n  priority: text(\"priority\"),\n  issuesRisks: integer(\"issues_risks\"),\n  division: text(\"division\").notNull(),\n  budgetAmount: real(\"budget_amount\").notNull(),\n  totalAmountSpent: real(\"total_amount_spent\").notNull(),\n  budgetSpent: real(\"budget_spent\"),\n  budgetStatus: text(\"budget_status\"),\n  budgetStatusCategory: text(\"budget_status_category\"),\n  location: text(\"location\"), // Will store coordinate arrays as JSON string\n  amountReceived: real(\"amount_received\"),\n  coAmount: real(\"co_amount\"),\n  projectedGrossMargin: real(\"projected_gross_margin\"),\n  actualGrossMargin: real(\"actual_gross_margin\"),\n  deviationProfitMargin: real(\"deviation_profit_margin\"),\n});\n\nexport const insertExcelProjectSchema = createInsertSchema(excelProjects);\nexport const selectExcelProjectSchema = createSelectSchema(excelProjects);\n\nexport type ExcelProject = typeof excelProjects.$inferSelect;\nexport type InsertExcelProject = z.infer<typeof insertExcelProjectSchema>;\n\n// Schema for the second Excel file containing activities, milestones, and risks\nexport const excelActivities = pgTable(\"excel_activities\", {\n  id: serial(\"id\").primaryKey(),\n  projectCode: text(\"project_code\").notNull(),\n  item: text(\"item\"),\n  description: text(\"description\"),\n  owner: text(\"owner\"),\n  startDate: date(\"start_date\"),\n  finishDate: date(\"finish_date\"),\n  percentageComplete: real(\"percentage_complete\"),\n  category: text(\"category\").notNull(), // Upcoming, Late, Workstream, Risk, Project Info\n  predecessor: text(\"predecessor\"),\n  status: text(\"status\"), // For risks: Open, Closed\n});\n\nexport const insertExcelActivitySchema = createInsertSchema(excelActivities);\nexport const selectExcelActivitySchema = createSelectSchema(excelActivities);\n\nexport type ExcelActivity = typeof excelActivities.$inferSelect;\nexport type InsertExcelActivity = z.infer<typeof insertExcelActivitySchema>;\n\n// Helper function to parse location coordinates\nexport function parseLocation(locationStr: string): Array<{lat: number, lng: number}> {\n  if (!locationStr) return [];\n  \n  try {\n    // Parse coordinates like \"[ (-0.4571, 39.6434), (-3.9389, 39.7419)]\"\n    const coordsMatch = locationStr.match(/\\((-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)\\)/g);\n    if (!coordsMatch) return [];\n    \n    return coordsMatch.map(coord => {\n      const match = coord.match(/\\((-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)\\)/);\n      if (match) {\n        return {\n          lat: parseFloat(match[2]), // latitude is second\n          lng: parseFloat(match[1])  // longitude is first\n        };\n      }\n      return { lat: 0, lng: 0 };\n    });\n  } catch (error) {\n    console.error('Error parsing location:', error);\n    return [];\n  }\n}\n\n// Helper function to calculate budget status category\nexport function calculateBudgetStatusCategory(budgetAmount: number, totalSpent: number): string {\n  const variance = totalSpent / budgetAmount;\n  if (variance < 0.9) return 'Under Budget';\n  if (variance < 1.1) return 'Within Budget';\n  if (variance < 1.5) return 'Over Budget';\n  return 'Critically Over Budget';\n}\n\n// Helper function to calculate performance status\nexport function calculatePerformanceStatus(timeCompletion: number): string {\n  const pi = 1 / (timeCompletion / 100); // Convert time completion to performance index\n  if (pi >= 1.10) return 'Ahead of Schedule';\n  if (pi >= 0.90) return 'On Track';\n  if (pi >= 0.75) return 'Slightly Behind';\n  return 'Critical Delay';\n}","size_bytes":4190},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull(), // 'active', 'completed', 'delayed', 'on-hold'\n  division: text(\"division\").notNull(), // 'mechanical', 'electrical', 'instrumentation'\n  manager: text(\"manager\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  \n  // Budget fields\n  budget: decimal(\"budget\", { precision: 15, scale: 2 }).notNull(),\n  actualSpend: decimal(\"actual_spend\", { precision: 15, scale: 2 }).notNull().default('0'),\n  commitments: decimal(\"commitments\", { precision: 15, scale: 2 }).notNull().default('0'),\n  forecast: decimal(\"forecast\", { precision: 15, scale: 2 }).notNull().default('0'),\n  amountReceived: decimal(\"amount_received\", { precision: 15, scale: 2 }).notNull().default('0'),\n  \n  // Progress fields\n  percentComplete: integer(\"percent_complete\").notNull().default(0),\n  elapsedDays: integer(\"elapsed_days\").notNull().default(0),\n  totalPlannedDays: integer(\"total_planned_days\").notNull(),\n  \n  // Variance and performance\n  budgetVarianceCategory: text(\"budget_variance_category\").notNull(), // 'under_budget', 'within_budget', 'overspent', 'critical_overspent'\n  riskCount: integer(\"risk_count\").notNull().default(0),\n  \n  // Margin fields\n  plannedRevenue: decimal(\"planned_revenue\", { precision: 15, scale: 2 }).notNull().default('0'),\n  plannedCost: decimal(\"planned_cost\", { precision: 15, scale: 2 }).notNull().default('0'),\n  actualRevenue: decimal(\"actual_revenue\", { precision: 15, scale: 2 }).notNull().default('0'),\n  actualCost: decimal(\"actual_cost\", { precision: 15, scale: 2 }).notNull().default('0'),\n  \n  // Performance metrics (stored as JSON for flexibility)\n  performanceMetrics: jsonb(\"performance_metrics\"), // EV, PV, AC, CPI, SPI, etc.\n  \n  // Additional data\n  milestones: jsonb(\"milestones\"), // Array of milestone objects\n  risks: jsonb(\"risks\"), // Array of risk objects\n  upcomingActivities: jsonb(\"upcoming_activities\"), // Array of activity objects\n  \n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const milestones = pgTable(\"milestones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull(), // 'completed', 'in_progress', 'pending', 'delayed'\n  dueDate: timestamp(\"due_date\").notNull(),\n  completedDate: timestamp(\"completed_date\"),\n  description: text(\"description\"),\n});\n\nexport const risks = pgTable(\"risks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  severity: text(\"severity\").notNull(), // 'low', 'medium', 'high', 'critical'\n  status: text(\"status\").notNull(), // 'open', 'in_progress', 'closed', 'mitigated'\n  owner: text(\"owner\").notNull(),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMilestoneSchema = createInsertSchema(milestones).omit({\n  id: true,\n});\n\nexport const insertRiskSchema = createInsertSchema(risks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertMilestone = z.infer<typeof insertMilestoneSchema>;\nexport type Milestone = typeof milestones.$inferSelect;\nexport type InsertRisk = z.infer<typeof insertRiskSchema>;\nexport type Risk = typeof risks.$inferSelect;\n","size_bytes":4209},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ProjectDetailsDashboard from \"@/pages/project-details-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/project/:id\" component={ProjectDetailsDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"dashboard-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1023},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 3.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(142.1 76.2% 36.3%);\n  --chart-3: hsl(45.4 93.4% 47.5%);\n  --chart-4: hsl(16.2 90.5% 48.4%);\n  --chart-5: hsl(340.7 82.2% 52.5%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 3.9%);\n  --sidebar-primary: hsl(221.2 83.2% 53.3%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221.2 83.2% 53.3%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 48%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(224.3 76.3% 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n/* Custom styles for dashboard */\n.status-green {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300;\n}\n\n.status-yellow {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300;\n}\n\n.status-red {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300;\n}\n\n.status-blue {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n}\n\n/* Smooth transitions for dark mode */\n* {\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;\n}\n","size_bytes":3553},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1597},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface DashboardFilters {\n  status: string;\n  division: string;\n  dateFrom: string;\n  dateTo: string;\n}\n\nexport interface KPIData {\n  totalProjects: number;\n  activeProjects: number;\n  completedProjects: number;\n  delayedProjects: number;\n  totalBudget: number;\n  actualSpend: number;\n  amountReceived: number;\n}\n\nexport interface SpendingData {\n  underBudget: number;\n  withinBudget: number;\n  overspent: number;\n  criticalOverspent: number;\n}\n\nexport interface StatusData {\n  aheadOfSchedule: number;\n  onTrack: number;\n  slightlyBehind: number;\n  criticalDelay: number;\n}\n\nexport interface DivisionData {\n  mechanical: number;\n  electrical: number;\n  instrumentation: number;\n}\n","size_bytes":691},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CalendarIcon, DollarSign, TrendingUp, AlertTriangle, BarChart3, PieChart } from \"lucide-react\";\nimport { Navbar } from \"@/components/navbar\";\nimport { ProjectMap } from \"@/components/dashboard/project-map\";\nimport { AIInsights } from \"@/components/ai-insights\";\nimport type { ExcelProject } from \"@shared/excel-schema\";\nimport type { DashboardFilters } from \"@/lib/types\";\nimport { PieChart as RechartsPie, Pie, Cell, ResponsiveContainer, BarChart as RechartsBar, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\nexport default function Dashboard() {\n  const [filters, setFilters] = useState<DashboardFilters>({\n    status: \"all\",\n    division: \"all\",\n    dateFrom: \"\",\n    dateTo: \"\",\n  });\n\n  // Fetch data using Excel data service\n  const { data: projects, isLoading: projectsLoading } = useQuery<ExcelProject[]>({\n    queryKey: [\"/api/projects\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.status !== \"all\") params.append(\"status\", filters.status);\n      if (filters.division !== \"all\") params.append(\"division\", filters.division);\n      if (filters.dateFrom) params.append(\"dateFrom\", filters.dateFrom);\n      if (filters.dateTo) params.append(\"dateTo\", filters.dateTo);\n\n      const response = await fetch(`/api/projects?${params.toString()}`);\n      if (!response.ok) throw new Error(\"Failed to fetch projects\");\n      return response.json();\n    },\n  });\n\n  const { data: kpiData } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/overview\"],\n  });\n\n  const { data: performanceStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/performance\"],\n  });\n\n  const { data: spendingStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/spending\"],\n  });\n\n  const { data: divisionStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/divisions\"],\n  });\n\n  const formatCurrency = (amount: number | undefined | null) => {\n    // Handle NaN, null, undefined, or empty string values\n    const validAmount = typeof amount === 'number' && !isNaN(amount) ? amount : 0;\n    \n    if (validAmount >= 1000000) {\n      return `$${(validAmount / 1000000).toFixed(1)}M`;\n    } else if (validAmount >= 1000) {\n      return `$${(validAmount / 1000).toFixed(0)}K`;\n    }\n    return `$${validAmount.toLocaleString()}`;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('on track')) {\n      return <Badge className=\"bg-green-100 text-green-800\">On Track</Badge>;\n    } else if (statusLower.includes('delay')) {\n      return <Badge className=\"bg-red-100 text-red-800\">Delayed</Badge>;\n    } else if (statusLower.includes('behind')) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Behind</Badge>;\n    }\n    return <Badge variant=\"outline\">{status}</Badge>;\n  };\n\n  const getBudgetStatusBadge = (status: string) => {\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('under')) {\n      return <Badge className=\"bg-green-100 text-green-800\">Under Budget</Badge>;\n    } else if (statusLower.includes('within')) {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Within Budget</Badge>;\n    } else if (statusLower.includes('over')) {\n      return <Badge className=\"bg-red-100 text-red-800\">Over Budget</Badge>;\n    }\n    return <Badge variant=\"outline\">{status}</Badge>;\n  };\n  console.log(performanceStats, spendingStats, \"Hello world\")\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n      <div className=\"p-4 md:p-6\">\n        {/* Header */}\n\n\n        {/* Filters */}\n        <div className=\"mb-6 flex flex-wrap gap-4 items-center\">\n          <Input\n            type=\"date\"\n            placeholder=\"From Date\"\n            value={filters.dateFrom}\n            onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n            className=\"w-auto\"\n            data-testid=\"input-date-from\"\n          />\n          <Input\n            type=\"date\"\n            placeholder=\"To Date\"\n            value={filters.dateTo}\n            onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n            className=\"w-auto\"\n            data-testid=\"input-date-to\"\n          />\n          <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"delayed\">Delayed</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={filters.division} onValueChange={(value) => setFilters({ ...filters, division: value })}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-division-filter\">\n              <SelectValue placeholder=\"All Divisions\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Divisions</SelectItem>\n              <SelectItem value=\"mechanical\">Mechanical</SelectItem>\n              <SelectItem value=\"electrical\">Electrical</SelectItem>\n              <SelectItem value=\"instrumentation\">Instrumentation</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* KPI Cards */}\n          <div className=\"lg:col-span-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mb-6\">\n              <Card data-testid=\"tile-total-projects\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Projects</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {kpiData?.totalProjects ? Math.round(kpiData.totalProjects).toString() : \"0\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Active portfolio</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"tile-total-budget\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Budget</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {kpiData ? formatCurrency(kpiData.totalBudget) + \" (est)\" : \"$0\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Allocated funds estimate</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"tile-actual-spend\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Actual Spend</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {kpiData ? formatCurrency(kpiData.actualSpend) + \" (est)\" : \"$0\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Current spending estimate</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"tile-amount-received\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Amount Received</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {kpiData ? formatCurrency(kpiData.amountReceived) + \" (est)\" : \"$0\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Revenue collected estimate</p>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"tile-total-risks\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Risks</CardTitle>\n                  <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {kpiData?.totalRisks ? Math.round(kpiData.totalRisks).toString() : \"0\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Active risks</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Budget Overview Section */}\n          <div className=\"lg:col-span-4 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Budget Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Budget Summary */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Budget Summary</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Total Allocated:</span>\n                        <span className=\"font-semibold\">{kpiData ? formatCurrency(kpiData.totalBudget) : 'KSh 0'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Total Spent:</span>\n                        <span className=\"font-semibold text-orange-600\">{kpiData ? formatCurrency(kpiData.actualSpend) : 'KSh 0'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Total Received:</span>\n                        <span className=\"font-semibold text-green-600\">{kpiData ? formatCurrency(kpiData.amountReceived) : 'KSh 0'}</span>\n                      </div>\n                      <div className=\"flex justify-between border-t pt-2\">\n                        <span className=\"text-sm text-muted-foreground\">Available Budget:</span>\n                        <span className=\"font-semibold text-blue-600\">\n                          {kpiData ? formatCurrency(Math.max(0, kpiData.totalBudget - kpiData.actualSpend)) : 'KSh 0'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Budget Utilization */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Budget Utilization</h3>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between mb-2\">\n                          <span className=\"text-sm\">Spent</span>\n                          <span className=\"text-sm\">{kpiData && kpiData.totalBudget > 0 ? ((kpiData.actualSpend / kpiData.totalBudget) * 100).toFixed(1) : '0'}%</span>\n                        </div>\n                        <Progress \n                          value={kpiData && kpiData.totalBudget > 0 ? (kpiData.actualSpend / kpiData.totalBudget) * 100 : 0} \n                          className=\"h-2\" \n                        />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mb-2\">\n                          <span className=\"text-sm\">Received</span>\n                          <span className=\"text-sm\">{kpiData && kpiData.totalBudget > 0 ? ((kpiData.amountReceived / kpiData.totalBudget) * 100).toFixed(1) : '0'}%</span>\n                        </div>\n                        <Progress \n                          value={kpiData && kpiData.totalBudget > 0 ? (kpiData.amountReceived / kpiData.totalBudget) * 100 : 0} \n                          className=\"h-2\" \n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Budget Status */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Budget Status</h3>\n                    <div className=\"space-y-2\">\n                      {spendingStats ? (\n                        Object.entries(spendingStats).map(([status, count]) => (\n                          <div key={status} className=\"flex justify-between items-center\">\n                            <span className=\"text-sm\">{status}:</span>\n                            <Badge variant=\"outline\" className=\"ml-2\">\n                              {count as number} projects\n                            </Badge>\n                          </div>\n                        ))\n                      ) : (\n                        <span className=\"text-sm text-muted-foreground\">No budget status data</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights Section */}\n          <div className=\"lg:col-span-4 mb-6\">\n            <AIInsights type=\"portfolio\" />\n          </div>\n\n          {/* Charts Row */}\n          <div className=\"lg:col-span-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              {/* Spending Categories Chart */}\n              <Card data-testid=\"card-spending-chart\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <PieChart className=\"h-5 w-5\" />\n                    Spending Categories\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {spendingStats ? (\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <RechartsPie>\n                        <Pie\n                          data={Object.entries(spendingStats).map(([category, value]) => ({ name: category, value }))}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={60}\n                          outerRadius={100}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {Object.entries(spendingStats).map((_, index) => (\n                            <Cell key={`cell-${index}`} fill={[\"#3B82F6\", \"#10B981\", \"#F59E0B\", \"#EF4444\"][index % 4]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </RechartsPie>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-muted-foreground\">No data</span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Performance Status Chart */}\n              <Card data-testid=\"card-status-chart\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <PieChart className=\"h-5 w-5\" />\n                    Performance Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {performanceStats ? (\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <RechartsPie>\n                        <Pie\n                          data={Object.entries(performanceStats).map(([name, value]) => ({ name, value }))}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={60}\n                          outerRadius={100}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {Object.entries(performanceStats).map((_, index) => (\n                            <Cell key={`cell-${index}`} fill={[\"#3B82F6\", \"#10B981\", \"#F59E0B\", \"#EF4444\"][index % 4]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </RechartsPie>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-muted-foreground\">No data</span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Division Projects Chart */}\n              <Card data-testid=\"card-division-chart\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Projects by Division\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {divisionStats ? (\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <RechartsBar data={Object.entries(divisionStats).map(([name, value]) => ({ name, value }))}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Bar \n                          dataKey=\"value\" \n                          fill=\"#3B82F6\" \n                          name=\"Projects\"\n                        />\n                      </RechartsBar>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-muted-foreground\">No data</span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Projects Table */}\n          <div className=\"lg:col-span-4\">\n            <Card data-testid=\"card-projects-table\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Project Portfolio</CardTitle>\n                <Button variant=\"outline\" data-testid=\"button-export-projects\">\n                  Export Data\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                    <div className=\"overflow-x-auto\">\n                    <Table data-testid=\"table-projects\">\n                      <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"sticky left-0 bg-white dark:bg-gray-900 z-10\">Project Code</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Division</TableHead>\n                        <TableHead>Progress</TableHead>\n                        <TableHead>Budget</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Budget Status</TableHead>\n                        <TableHead>Risks</TableHead>\n                      </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                      {projectsLoading ? (\n                        <TableRow>\n                        <TableCell colSpan={8} className=\"text-center py-4\">\n                          Loading projects...\n                        </TableCell>\n                        </TableRow>\n                      ) : projects && projects.length > 0 ? (\n                        projects.map((project) => (\n                        <TableRow\n                          key={project.id}\n                          className=\"cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\"\n                          onClick={() => window.open(`/project/${project.projectCode}`, '_blank')}\n                          data-testid={`row-project-${project.projectCode}`}\n                        >\n                          <TableCell className=\"font-medium sticky left-0 bg-white dark:bg-gray-900 z-10\">\n                          <Link href={`/project/${project.projectCode}`} className=\"text-blue-600 hover:underline\">\n                            {project.projectCode}\n                          </Link>\n                          </TableCell>\n                          <TableCell className=\"max-w-xs truncate\" title={project.description}>\n                          {project.description}\n                          </TableCell>\n                          <TableCell>{project.division}</TableCell>\n                          <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress\n                            value={project.percentageComplete * 100}\n                            className=\"w-16 h-2\"\n                            />\n                            <span className=\"text-sm text-gray-600\">\n                            {(project.percentageComplete * 100).toFixed(0)}%\n                            </span>\n                          </div>\n                          </TableCell>\n                          <TableCell>{formatCurrency(project.budgetAmount)}</TableCell>\n                          <TableCell>{project.performanceCategory ? getStatusBadge(project.performanceCategory) : '-'}</TableCell>\n                          <TableCell>{project.budgetStatusCategory ? getBudgetStatusBadge(project.budgetStatusCategory) : '-'}</TableCell>\n                          <TableCell>\n                          <Badge variant={(project.issuesRisks || 0) > 3 ? \"destructive\" : \"outline\"}>\n                            {project.issuesRisks || 0}\n                          </Badge>\n                          </TableCell>\n                        </TableRow>\n                        ))\n                      ) : (\n                        <TableRow>\n                        <TableCell colSpan={8} className=\"text-center py-4\">\n                          No projects found\n                        </TableCell>\n                        </TableRow>\n                      )}\n                      </TableBody>\n                    </Table>\n                    </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Project Locations Map */}\n        <div className=\"mt-6\">\n          <ProjectMap projects={projects || []} />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23934},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { ArrowLeft, Handshake, HardHat } from \"lucide-react\";\n\n// UI5 Web Components\nimport {\n  ObjectPage,\n  ObjectPageHeader,\n  ObjectPageTitle,\n  ObjectPageSection,\n  ObjectPageSubSection,\n  Card,\n  CardHeader,\n  Table,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableRow,\n  TableCell,\n  ProgressIndicator,\n  Button,\n  FlexBox,\n  Title,\n  Label,\n  Text,\n  // Timeline,\n  // TimelineItem,\n} from \"@ui5/webcomponents-react\";\nimport { TimelineChart } from \"@ui5/webcomponents-react-charts\";\nimport {\n  Calendar,\n  CheckCircle,\n  Clock,\n  Settings,\n  Building,\n  ShoppingCart,\n} from \"lucide-react\";\n\n// Import required icons\nimport \"@ui5/webcomponents-icons/dist/arrow-left.js\";\nimport \"@ui5/webcomponents-icons/dist/workflow-tasks.js\";\nimport \"@ui5/webcomponents-icons/dist/calendar.js\";\n\nimport { AIInsights } from \"@/components/ai-insights\";\nimport { ProjectAnalytics } from \"@/components/project-analytics\";\nimport type { ExcelProject, ExcelActivity } from \"@shared/excel-schema\";\nconst formatDate = (dateString) => {\n  return new Date(dateString).toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n};\n\nconst getStatusIcon = (percentageComplete) => {\n  if (percentageComplete >= 1) return <CheckCircle className=\"w-5 h-5\" />;\n  if (percentageComplete > 0) return <Clock className=\"w-5 h-5\" />;\n  return <Calendar className=\"w-5 h-5\" />;\n};\n\nconst getPhaseIcon = (phase) => {\n  const icons = {\n    Preliminaries: <Settings className=\"w-4 h-4\" />,\n    Procurement: <ShoppingCart className=\"w-4 h-4\" />,\n    Construction: <HardHat className=\"w-4 h-4\" />,\n    Commisioning: <Handshake className=\"w-4 h-4\" />,\n  };\n  return icons[phase] || <Calendar className=\"w-4 h-4\" />;\n};\n\nconst getStatusColor = (percentageComplete) => {\n  if (percentageComplete >= 1) return \"text-green-600\";\n  if (percentageComplete > 0) return \"text-yellow-600\";\n  return \"text-blue-600\";\n};\n\nconst getProgressColor = (percentageComplete) => {\n  if (percentageComplete >= 1) return \"bg-green-500\";\n  if (percentageComplete > 0) return \"bg-yellow-500\";\n  return \"bg-blue-500\";\n};\n\nconst getBgColor = (percentageComplete) => {\n  if (percentageComplete >= 1) return \"bg-green-50 border-green-200\";\n  if (percentageComplete > 0) return \"bg-yellow-50 border-yellow-200\";\n  return \"bg-blue-50 border-blue-200\";\n};\nexport default function ProjectDetails() {\n  const { id } = useParams();\n\n  // Fetch project data\n  const { data: project, isLoading: projectLoading } = useQuery<ExcelProject>({\n    queryKey: [\"/api/projects\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch project\");\n      return response.json();\n    },\n  });\n\n  // Fetch activities data\n  const { data: milestones } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"milestones\"],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/projects/${project?.projectCode}/milestones`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch milestones\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  const { data: risks } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"risks\"],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/projects/${project?.projectCode}/risks`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch risks\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  function getTimelineChartData(activities: ExcelActivity[]): any[] {\n    // Find the earliest and latest dates among activities\n    const validStartDates = activities\n      .map((a) => {\n        const d = formatDate(a.startDate);\n        // Use original date value for calculation\n        return d !== \"N/A\" && a.startDate\n          ? new Date(\n              Number(a.startDate) ? formatDate(a.startDate) : a.startDate\n            ).getTime()\n          : null;\n      })\n      .filter((t): t is number => t !== null);\n    const validFinishDates = activities\n      .map((a) => {\n        const d = formatDate(a.finishDate);\n        return d !== \"N/A\" && a.finishDate\n          ? new Date(\n              Number(a.finishDate) ? formatDate(a.finishDate) : a.finishDate\n            ).getTime()\n          : null;\n      })\n      .filter((t): t is number => t !== null);\n\n    const minDate =\n      validStartDates.length > 0 ? Math.min(...validStartDates) : null;\n    const maxDate =\n      validFinishDates.length > 0 ? Math.max(...validFinishDates) : null;\n\n    // Assign unique IDs for each activity\n    const activityIds = activities.map((activity, idx) =>\n      activity.id ? String(activity.id) : `ACT-${idx}`\n    );\n\n    return activities.map((activity, idx) => {\n      const startDateStr = formatDate(activity.startDate);\n      const finishDateStr = formatDate(activity.finishDate);\n\n      // Calculate start offset from earliest date\n      let startOffset = 0;\n      if (\n        minDate !== null &&\n        startDateStr !== \"N/A\" &&\n        startDateStr !== activity.startDate\n      ) {\n        const activityStart = new Date(startDateStr).getTime();\n        startOffset = Math.round(\n          (activityStart - minDate) / (1000 * 60 * 60 * 24)\n        );\n      }\n\n      // Connect to previous activity if exists\n      const connections = [];\n      if (idx > 0) {\n        connections.push({\n          itemId: activityIds[idx - 1],\n          type: \"F2S\",\n        });\n      }\n\n      return {\n        color: `var(--sapChart_OrderedColor_${(idx % 11) + 1})`,\n        label: activity.item,\n        tasks: [\n          {\n            id: activityIds[idx],\n            start: startOffset,\n            duration: getDuration(startDateStr, finishDateStr),\n            connections: connections.length > 0 ? connections : undefined,\n          },\n        ],\n      };\n    });\n  }\n\n  // Helper to calculate duration in days\n  function getDuration(start: string | null, finish: string | null): number {\n    const s = formatDate(start);\n    const f = formatDate(finish);\n    if (!start || !finish || s === \"N/A\" || f === \"N/A\") return 1;\n    const startDate = new Date(s).getTime();\n    const finishDate = new Date(f).getTime();\n    return Math.max(\n      1,\n      Math.round((finishDate - startDate) / (1000 * 60 * 60 * 24))\n    );\n  }\n\n  // TimelineChart rendering function\n  function renderTimelineChart(activities: ExcelActivity[]) {\n    if (!activities || activities.length === 0)\n      return <Text>No timeline data</Text>;\n    const dataset = getTimelineChartData(activities);\n\n    // Find earliest and latest dates for display (actual dates)\n    const validStartDates = activities\n      .map((a) => a.startDate)\n      .filter((d): d is string => !!d && d !== \"N/A\");\n    const validFinishDates = activities\n      .map((a) => a.finishDate)\n      .filter((d): d is string => !!d && d !== \"N/A\");\n\n    let minDate: Date | null = null;\n    let maxDate: Date | null = null;\n    if (validStartDates.length > 0) {\n      minDate = new Date(\n        formatDate(\n          validStartDates.reduce((a, b) =>\n            new Date(formatDate(a)).getTime() <\n            new Date(formatDate(b)).getTime()\n              ? a\n              : b\n          )\n        )\n      );\n    }\n    if (validFinishDates.length > 0) {\n      maxDate = new Date(\n        formatDate(\n          validFinishDates.reduce((a, b) =>\n            new Date(formatDate(a)).getTime() >\n            new Date(formatDate(b)).getTime()\n              ? a\n              : b\n          )\n        )\n      );\n    }\n\n    const start = 0;\n    const totalDuration = Math.max(\n      ...dataset.map((d) => d.tasks?.[0]?.start + d.tasks?.[0]?.duration || 0),\n      1\n    );\n\n    // Format actual earliest and latest dates for column title, including day of week\n    const startDateLabel = minDate\n      ? minDate.toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n        })\n      : \"\";\n    const finishDateLabel = maxDate\n      ? maxDate.toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n        })\n      : \"\";\n\n    return (\n      <TimelineChart\n        dataset={dataset}\n        isDiscrete\n        showConnection={true}\n        start={start}\n        totalDuration={totalDuration}\n        columnTitle={`Duration (${startDateLabel} - ${finishDateLabel})`}\n        style={{  width: \"100%\",paddingBottom: \"2rem\" }}\n      />\n    );\n  }\n  const { data: upcomingActivities } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"upcoming\"],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/projects/${project?.projectCode}/upcoming`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch upcoming activities\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  const { data: lateActivities } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"late\"],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/projects/${project?.projectCode}/late`\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch late activities\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  const formatCurrency = (amount: number | null | undefined) => {\n    if (amount === undefined || amount === null) return \"$0\";\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    } else if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(0)}K`;\n    }\n    return `$${amount.toLocaleString()}`;\n  };\n\n  const formatDate = (dateStr: string | null) => {\n    if (!dateStr) return \"N/A\";\n    // Handles formats like \"45854\" (Excel serial date)\n    if (/^\\d+$/.test(dateStr)) {\n      // Excel serial date: days since 1899-12-30\n      const excelEpoch = new Date(Date.UTC(1899, 11, 30));\n      const date = new Date(\n        excelEpoch.getTime() + Number(dateStr) * 24 * 60 * 60 * 1000\n      );\n      return date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      });\n    }\n    // Otherwise, try parsing as ISO string\n    const date = new Date(dateStr);\n    if (isNaN(date.getTime())) return dateStr;\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getRiskColor = (description: string) => {\n    const level = description?.toLowerCase();\n    if (level === \"high\" || level === \"critical\") return \"#dc3545\";\n    if (level === \"medium\") return \"#ffc107\";\n    if (level === \"low\") return \"#28a745\";\n    return \"#6c757d\";\n  };\n\n  const getStatusColor = (status: string) => {\n    if (status === \"Open\") return \"#dc3545\";\n    if (status === \"Closed\") return \"#28a745\";\n    return \"#6c757d\";\n  };\n\n  if (projectLoading) {\n    return (\n      <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\n        <Text>Loading project details...</Text>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\n        <Text>Project not found</Text>\n        <div style={{ marginTop: \"1rem\" }}>\n          <Link href=\"/\">\n            <Button icon=\"arrow-left\">Back to Dashboard</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ minHeight: \"100vh\" }}>\n      <ObjectPage\n        headerArea={\n          <ObjectPageHeader>\n            {/* Back Button */}\n            <div style={{ marginBottom: \"1rem\" }}>\n              <Link href=\"/\">\n                <Button icon=\"arrow-left\" design=\"Transparent\">\n                  Back to Dashboar\n                </Button>\n              </Link>\n            </div>\n\n            {/* KPI Cards in Header Area */}\n            <FlexBox\n              wrap=\"NoWrap\"\n              justifyContent=\"SpaceAround\"\n              style={{ padding: \"1rem\", overflowX: \"auto\" }}\n            >\n              <Card style={{ margin: \"0.5rem\", minWidth: \"180px\" }}>\n                <div style={{ textAlign: \"center\", padding: \"1rem\" }}>\n                  <Title level=\"H3\">\n                    {Math.round((project.scopeCompletion || 0) * 100)}%\n                  </Title>\n                  <Text>Scope Completion</Text>\n                </div>\n              </Card>\n              <Card style={{ margin: \"0.5rem\", minWidth: \"180px\" }}>\n                <div style={{ textAlign: \"center\", padding: \"1rem\" }}>\n                  <Title level=\"H3\">\n                    {(project.timeCompletion || 0).toFixed(1)}%\n                  </Title>\n                  <Text>Time Completion</Text>\n                </div>\n              </Card>\n              <Card style={{ margin: \"0.5rem\", minWidth: \"180px\" }}>\n                <div style={{ textAlign: \"center\", padding: \"1rem\" }}>\n                  <Title\n                    level=\"H3\"\n                    style={{\n                      color:\n                        project.performanceCategory === \"On Track\"\n                          ? \"#28a745\"\n                          : project.performanceCategory === \"Slightly Behind\"\n                          ? \"#ffc107\"\n                          : project.performanceCategory === \"Critical Delay\"\n                          ? \"#dc3545\"\n                          : \"#007bff\",\n                    }}\n                  >\n                    {project.performanceCategory || \"On Track\"}\n                  </Title>\n                  <Text>Performance Category</Text>\n                </div>\n              </Card>\n              <Card style={{ margin: \"0.5rem\", minWidth: \"180px\" }}>\n                <div style={{ textAlign: \"center\", padding: \"1rem\" }}>\n                  <Title\n                    level=\"H3\"\n                    style={{\n                      color:\n                        project.budgetStatusCategory === \"Under Budget\"\n                          ? \"#28a745\"\n                          : project.budgetStatusCategory === \"Within Budget\"\n                          ? \"#007bff\"\n                          : project.budgetStatusCategory === \"Over Budget\"\n                          ? \"#ffc107\"\n                          : \"#dc3545\",\n                    }}\n                  >\n                    {project.budgetStatusCategory || \"Within Budget\"}\n                  </Title>\n                  <Text>Budget Status</Text>\n                </div>\n              </Card>\n              <Card style={{ margin: \"0.5rem\", minWidth: \"180px\" }}>\n                <div style={{ textAlign: \"center\", padding: \"1rem\" }}>\n                  <Title\n                    level=\"H3\"\n                    style={{\n                      color:\n                        (project.deviationProfitMargin || 0) > 0\n                          ? \"#28a745\"\n                          : \"#dc3545\",\n                    }}\n                  >\n                    {((project.deviationProfitMargin || 0) * 100).toFixed(2)}%\n                  </Title>\n                  <Text>Margin Deviation</Text>\n                </div>\n              </Card>\n            </FlexBox>\n          </ObjectPageHeader>\n        }\n        titleArea={\n          <ObjectPageTitle>\n            <Title level=\"H1\">\n              {project.projectCode} - {project.description}\n            </Title>\n          </ObjectPageTitle>\n        }\n      >\n        {/* Section 1: Budget Details and Time Metrics */}\n        <ObjectPageSection id=\"overview-section\" titleText=\"Project Overview\">\n          <ObjectPageSubSection id=\"overview-subsection\" titleText=\"\">\n            <FlexBox\n              wrap=\"Wrap\"\n              justifyContent=\"SpaceAround\"\n              style={{ padding: \"1rem\", gap: \"2rem\" }}\n            >\n              {/* Budget Details Card */}\n              <Card\n                style={{ minWidth: \"400px\", maxWidth: \"500px\" }}\n                header={<CardHeader titleText=\"Budget Details\" />}\n              >\n                <div style={{ padding: \"1rem\", display: \"flex\", gap: \"2rem\" }}>\n                  {/* Column 1 */}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Budget Amount:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {formatCurrency(project.budgetAmount)}\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Budget Spent:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {formatCurrency(project.totalAmountSpent)}\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>CO Amount:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {formatCurrency(project.coAmount || 0)}\n                      </Text>\n                    </div>\n                  </div>\n\n                  {/* Column 2 */}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Projected Margin:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {((project.projectedGrossMargin || 0) * 100).toFixed(2)}\n                        %\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Actual Margin:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {((project.actualGrossMargin || 0) * 100).toFixed(2)}%\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Margin Deviation:</Label>\n                      <br />\n                      <Text\n                        style={{\n                          fontSize: \"1.1em\",\n                          fontWeight: \"bold\",\n                          color:\n                            (project.deviationProfitMargin || 0) > 0\n                              ? \"#28a745\"\n                              : \"#dc3545\",\n                        }}\n                      >\n                        {((project.deviationProfitMargin || 0) * 100).toFixed(\n                          2\n                        )}\n                        %\n                      </Text>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Time Metrics Card */}\n              <Card\n                style={{ minWidth: \"400px\", maxWidth: \"500px\" }}\n                header={<CardHeader titleText=\"Time Metrics\" />}\n              >\n                <div style={{ padding: \"1rem\", display: \"flex\", gap: \"2rem\" }}>\n                  {/* Column 1 */}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Start Date:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {formatDate(project.startDate)}\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Finish Date:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {formatDate(project.finishDate)}\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Scope Completion:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {Math.round((project.scopeCompletion || 0) * 100)}%\n                      </Text>\n                    </div>\n                  </div>\n\n                  {/* Column 2 */}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Time Completion:</Label>\n                      <br />\n                      <Text style={{ fontSize: \"1.1em\", fontWeight: \"bold\" }}>\n                        {(project.timeCompletion || 0).toFixed(1)}%\n                      </Text>\n                    </div>\n                    <div style={{ marginBottom: \"1rem\" }}>\n                      <Label>Performance Category:</Label>\n                      <br />\n                      <Text\n                        style={{\n                          fontSize: \"1.1em\",\n                          fontWeight: \"bold\",\n                          color:\n                            project.performanceCategory === \"On Track\"\n                              ? \"#28a745\"\n                              : project.performanceCategory ===\n                                \"Slightly Behind\"\n                              ? \"#ffc107\"\n                              : project.performanceCategory === \"Critical Delay\"\n                              ? \"#dc3545\"\n                              : \"#007bff\",\n                        }}\n                      >\n                        {project.performanceCategory || \"On Track\"}\n                      </Text>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </FlexBox>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Section 1.5: AI Insights */}\n        <ObjectPageSection id=\"ai-insights-section\" titleText=\"AI Insights\">\n          <ObjectPageSubSection id=\"ai-insights-subsection\" titleText=\"\">\n            <div style={{ padding: \"1rem\" }}>\n              <AIInsights type=\"project\" projectCode={project?.projectCode} />\n            </div>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Section 1.7: Project Analytics */}\n        <ObjectPageSection id=\"analytics-section\" titleText=\"Project Analytics\">\n          <ObjectPageSubSection id=\"analytics-subsection\" titleText=\"\">\n            <div style={{ padding: \"1rem\" }}>\n              {project && <ProjectAnalytics project={project} />}\n            </div>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Section 2: Milestones and Risks */}\n        <ObjectPageSection\n          id=\"milestones-risks-section\"\n          titleText=\"Milestones & Risks\"\n        >\n          <ObjectPageSubSection id=\"milestones-risks-subsection\" titleText=\"\">\n            <FlexBox\n              wrap=\"Wrap\"\n              justifyContent=\"SpaceAround\"\n              style={{ padding: \"1rem\", gap: \"2rem\" }}\n            >\n              {/* Milestones Card with Timeline */}\n              <Card\n                style={{ minWidth: \"450px\", maxWidth: \"600px\" }}\n                header={<CardHeader titleText=\"Milestones (Workstreams)\" />}\n              >\n                <div style={{ padding: \"1rem\" }}>\n                  {milestones && milestones.length > 0 ? (\n                    <div className=\"max-w-4xl mx-auto p-6 bg-white\">\n                      <div className=\"relative\">\n                        {/* Timeline line */}\n                        <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-gray-300\"></div>\n\n                        {[\n                          \"Preliminaries\",\n                          \"Procurement\",\n                          \"Construction\",\n                          \"Commisioning\",\n                        ]\n                          .map((phase) =>\n                            milestones.find((m) => m.item === phase)\n                          )\n                          .filter(Boolean)\n                          .map((milestone, index) => {\n                            const percentageComplete =\n                              milestone!.percentageComplete || 0;\n                            const isComplete = percentageComplete >= 1;\n                            const isOngoing =\n                              percentageComplete > 0 && percentageComplete < 1;\n\n                            return (\n                              <div\n                                key={milestone!.item}\n                                className=\"relative mb-8 last:mb-0\"\n                              >\n                                {/* Timeline node */}\n                                <div\n                                  className={`absolute left-6 w-4 h-4 rounded-full border-2 bg-white z-10 ${\n                                    isComplete\n                                      ? \"border-green-500\"\n                                      : isOngoing\n                                      ? \"border-yellow-500\"\n                                      : \"border-blue-500\"\n                                  }`}\n                                >\n                                  <div\n                                    className={`w-2 h-2 rounded-full m-0.5 ${\n                                      isComplete\n                                        ? \"bg-green-500\"\n                                        : isOngoing\n                                        ? \"bg-yellow-500\"\n                                        : \"bg-blue-500\"\n                                    }`}\n                                  ></div>\n                                </div>\n\n                                {/* Content card */}\n                                <div\n                                  className={`ml-16 p-6 rounded-lg border-2 shadow-sm transition-all hover:shadow-md ${getBgColor(\n                                    percentageComplete\n                                  )}`}\n                                >\n                                  {/* Header */}\n                                  <div className=\"flex items-center justify-between mb-4\">\n                                    <div className=\"flex items-center gap-3\">\n                                      <div\n                                        className={`p-2 rounded-lg ${\n                                          isComplete\n                                            ? \"bg-green-100\"\n                                            : isOngoing\n                                            ? \"bg-yellow-100\"\n                                            : \"bg-blue-100\"\n                                        }`}\n                                      >\n                                        {getPhaseIcon(milestone!.item)}\n                                      </div>\n                                      <div>\n                                        <h3 className=\"text-xl font-semibold text-gray-900\">\n                                          {milestone!.item}\n                                        </h3>\n                                        <p className=\"text-sm text-gray-600\">\n                                          Target:{\" \"}\n                                          {formatDate(milestone!.finishDate)}\n                                        </p>\n                                      </div>\n                                    </div>\n\n                                    <div\n                                      className={`flex items-center gap-2 ${getStatusColor(\n                                        percentageComplete\n                                      )}`}\n                                    >\n                                      {getStatusIcon(percentageComplete)}\n                                      <span className=\"font-medium\">\n                                        {Math.round(percentageComplete * 100)}%\n                                      </span>\n                                    </div>\n                                  </div>\n\n                                  {/* Progress bar */}\n                                  <div className=\"mb-4\">\n                                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                      <div\n                                        className={`h-2 rounded-full transition-all duration-500 ${getProgressColor(\n                                          percentageComplete\n                                        )}`}\n                                        style={{\n                                          width: `${percentageComplete * 100}%`,\n                                        }}\n                                      ></div>\n                                    </div>\n                                  </div>\n\n                                  {/* Description */}\n                                  <p className=\"text-gray-700 font-medium\">\n                                    {milestone!.description}\n                                  </p>\n\n                                  {/* Status badge */}\n                                  <div className=\"mt-3\">\n                                    <span\n                                      className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                                        isComplete\n                                          ? \"bg-green-100 text-green-800\"\n                                          : isOngoing\n                                          ? \"bg-yellow-100 text-yellow-800\"\n                                          : \"bg-blue-100 text-blue-800\"\n                                      }`}\n                                    >\n                                      {isComplete\n                                        ? \"Completed\"\n                                        : isOngoing\n                                        ? \"In Progress\"\n                                        : \"Not Started\"}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                      </div>\n                    </div>\n                  ) : (\n                    <Text>No milestones available</Text>\n                  )}\n                </div>\n              </Card>\n\n              {/* Risks Card */}\n              <Card\n                style={{ minWidth: \"450px\", maxWidth: \"600px\" }}\n                header={<CardHeader titleText=\"Risks\" />}\n              >\n                <div style={{ padding: \"1rem\" }}>\n                  {risks && risks.length > 0 ? (\n                    risks.map((risk, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          marginBottom: \"1rem\",\n                          padding: \"0.5rem\",\n                          border: \"1px solid #e0e0e0\",\n                          borderRadius: \"4px\",\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            alignItems: \"center\",\n                            marginBottom: \"0.5rem\",\n                          }}\n                        >\n                          <Text style={{ fontWeight: \"bold\" }}>\n                            {risk.item}\n                          </Text>\n                          <Text\n                            style={{\n                              color: getStatusColor(risk.status || \"\"),\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {risk.status || \"Unknown\"}\n                          </Text>\n                        </div>\n                        <div style={{ marginBottom: \"0.5rem\" }}>\n                          <Text\n                            style={{\n                              color: getRiskColor(risk.description || \"\"),\n                            }}\n                          >\n                            Level: {risk.description || \"Not specified\"}\n                          </Text>\n                        </div>\n                        {risk.owner && (\n                          <div style={{ marginBottom: \"0.5rem\" }}>\n                            <Text style={{ color: \"#666\" }}>\n                              Owner: {risk.owner}\n                            </Text>\n                          </div>\n                        )}\n                        {risk.startDate && (\n                          <div>\n                            <Text style={{ color: \"#666\" }}>\n                              Date: {formatDate(risk.startDate)}\n                            </Text>\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  ) : (\n                    <Text>No risks available</Text>\n                  )}\n                </div>\n              </Card>\n            </FlexBox>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Section 3: Upcoming Activities with Timeline */}\n        <ObjectPageSection\n          id=\"upcoming-section\"\n          titleText=\"Upcoming Activities\"\n        >\n          <ObjectPageSubSection id=\"upcoming-subsection\" titleText=\"\">\n            <Card\n              header={<CardHeader titleText=\"Upcoming Activities Timeline\" />}\n            >\n              <div style={{ padding: \"1rem\" }}>\n                {upcomingActivities && upcomingActivities.length > 0 ? (\n                  renderTimelineChart(upcomingActivities || [])\n                ) : (\n                  <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\n                    <Text>No upcoming activities</Text>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Section 4: Late Activities */}\n        <ObjectPageSection id=\"late-section\" titleText=\"Late Activities\">\n          <ObjectPageSubSection id=\"late-subsection\" titleText=\"\">\n            <Card header={<CardHeader titleText=\"Late Activities\" />}>\n              {lateActivities && lateActivities.length > 0 ? (\n                <Table\n                  headerRow={\n                    <TableHeaderRow sticky>\n                      <TableHeaderCell>\n                        <span>Item</span>\n                      </TableHeaderCell>\n                      <TableHeaderCell>\n                        <span>Start Date</span>\n                      </TableHeaderCell>\n                      <TableHeaderCell>\n                        <span>Finish Date</span>\n                      </TableHeaderCell>\n                      <TableHeaderCell>\n                        <span>Progress</span>\n                      </TableHeaderCell>\n                      <TableHeaderCell>\n                        <span>Days Overdue</span>\n                      </TableHeaderCell>\n                    </TableHeaderRow>\n                  }\n                >\n                  {lateActivities.map((activity, index) => {\n                    console.log(activity)\n                    // Handle Excel serial date or ISO string for finishDate\n                    let finishDate: Date | null = null;\n                    if (activity.finishDate) {\n                      if (/^\\d+$/.test(activity.finishDate)) {\n                      // Excel serial date: days since 1899-12-30\n                      const excelEpoch = new Date(Date.UTC(1899, 11, 30));\n                      finishDate = new Date(\n                        excelEpoch.getTime() +\n                        Number(activity.finishDate) * 24 * 60 * 60 * 1000\n                      );\n                      } else {\n                      finishDate = new Date(activity.finishDate);\n                      }\n                    }\n                    const today = new Date();\n                    // Remove time part for accurate day comparison\n                    const finishDateOnly = finishDate\n                      ? new Date(\n                        finishDate.getFullYear(),\n                        finishDate.getMonth(),\n                        finishDate.getDate()\n                      )\n                      : null;\n                    const todayOnly = new Date(\n                      today.getFullYear(),\n                      today.getMonth(),\n                      today.getDate()\n                    );\n                    const daysOverdue =\n                      finishDateOnly && finishDateOnly < todayOnly\n                      ? Math.ceil(\n                        (todayOnly.getTime() - finishDateOnly.getTime()) /\n                          (1000 * 60 * 60 * 24)\n                        )\n                      : 0;\n\n                    return (\n                      <TableRow key={index}>\n                        <TableCell>\n                          <Text style={{ color: \"#dc3545\" }}>\n                            {activity.item}\n                          </Text>\n                        </TableCell>\n                        <TableCell>\n                          <Text>{formatDate(activity.startDate)}</Text>\n                        </TableCell>\n                        <TableCell>\n                          <Text>{formatDate(activity.finishDate)}</Text>\n                        </TableCell>\n                        <TableCell>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              gap: \"0.5rem\",\n                            }}\n                          >\n                            <ProgressIndicator\n                              value={Math.round(\n                                (activity.percentageComplete || 0) * 100\n                              )}\n                              style={{ width: \"80px\" }}\n                            />\n                            <Text>\n                              {Math.round(\n                                (activity.percentageComplete || 0) * 100\n                              )}\n                              %\n                            </Text>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Text\n                            style={{ color: \"#dc3545\", fontWeight: \"bold\" }}\n                          >\n                            {daysOverdue > 0\n                              ? `${daysOverdue} days`\n                              : \"On time\"}\n                          </Text>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </Table>\n              ) : (\n                <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\n                  <Text>No late activities</Text>\n                </div>\n              )}\n            </Card>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n      </ObjectPage>\n    </div>\n  );\n}\n","size_bytes":39346},"client/src/pages/ui5-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n// Temporarily remove problematic UI5 charts to fix runtime errors\n// import {\n//   PieChart,\n//   DonutChart,\n//   BarChart,\n//   ColumnChart,\n// } from \"@ui5/webcomponents-react-charts\";\nimport { Link } from \"wouter\";\n// Fix default markers in react-leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  iconUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  shadowUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n});\n\n// UI5 Web Components\nimport {\n  ObjectPage,\n  ObjectPageHeader,\n  ObjectPageTitle,\n  ObjectPageSection,\n  ObjectPageSubSection,\n  Card,\n  CardHeader,\n  Table,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableRow,\n  TableCell,\n  ProgressIndicator,\n  Button,\n  ComboBox,\n  ComboBoxItem,\n  DatePicker,\n  FlexBox,\n  Title,\n  Label,\n  Text,\n} from \"@ui5/webcomponents-react\";\nimport {\n  PieChart,\n  DonutChart,\n  BarChart,\n  ColumnChart,\n} from \"@ui5/webcomponents-react-charts\";\n// UI5 Charts - temporarily disabled due to runtime errors\n// import {\n//   PieChart,\n//   ColumnChart,\n// } from \"@ui5/webcomponents-react-charts\";\n\n// Import required icons\nimport \"@ui5/webcomponents-icons/dist/download.js\";\n\nimport type { ExcelProject } from \"@shared/excel-schema\";\nimport { parseLocation } from \"@shared/excel-schema\";\nimport type { DashboardFilters } from \"@/lib/types\";\n\nexport default function UI5Dashboard() {\n  const [filters, setFilters] = useState<DashboardFilters>({\n    status: \"all\",\n    division: \"all\",\n    dateFrom: \"\",\n    dateTo: \"\",\n  });\n  const [, navigate] = useLocation();\n\n  // Fetch data using Excel data service\n  const { data: projects, isLoading: projectsLoading } = useQuery<\n    ExcelProject[]\n  >({\n    queryKey: [\"/api/projects\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.status !== \"all\") params.append(\"status\", filters.status);\n      if (filters.division !== \"all\")\n        params.append(\"division\", filters.division);\n      if (filters.dateFrom) params.append(\"dateFrom\", filters.dateFrom);\n      if (filters.dateTo) params.append(\"dateTo\", filters.dateTo);\n\n      const response = await fetch(`/api/projects?${params.toString()}`);\n      if (!response.ok) throw new Error(\"Failed to fetch projects\");\n      return response.json();\n    },\n  });\n\n  const { data: kpiData } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/overview\"],\n  });\n\n  const { data: performanceStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/performance\"],\n  });\n\n  const { data: spendingStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/spending\"],\n  });\n\n  const { data: divisionStats } = useQuery<any>({\n    queryKey: [\"/api/projects/stats/divisions\"],\n  });\n\n  const { data: projectLocations } = useQuery<any[]>({\n    queryKey: [\"/api/projects/locations\"],\n  });\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    } else if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(0)}K`;\n    }\n    return `$${amount.toLocaleString()}`;\n  };\n\n  // Function to reload Excel data\n  const reloadData = async () => {\n    try {\n      await fetch(\"/api/projects/reload\", { method: \"POST\" });\n      // Invalidate all queries to refetch data\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Failed to reload data:\", error);\n    }\n  };\n\n  // Sample locations for map when API fails\n  const getSampleLocations = () => {\n    if (!projects || projects.length === 0) {\n      // Return default sample locations if no projects\n      return [\n        {\n          id: \"1\",\n          code: \"51422\",\n          name: \"Sample Project 1\",\n          locations: [{ lat: 39.7419, lng: -3.9389 }],\n        },\n        {\n          id: \"2\",\n          code: \"51419\",\n          name: \"Sample Project 2\",\n          locations: [{ lat: 39.6434, lng: -0.4571 }],\n        },\n      ];\n    }\n\n    return projects.slice(0, 3).map((project, index) => {\n      const coords = [\n        { lat: 39.7419, lng: -3.9389 },\n        { lat: 39.6434, lng: -0.4571 },\n        { lat: 34.768, lng: -0.0917 },\n      ];\n      return {\n        id: project.id.toString(),\n        code: project.projectCode,\n        name: project.description,\n        locations: [coords[index] || coords[0]],\n      };\n    });\n  };\n\n  const handleTableRowClick = (event: any) => {\n    const row = event.detail?.row || event.target.closest(\"[data-project-id]\");\n    const projectId = row?.dataset?.projectId;\n    if (projectId) {\n      navigate(`/project/${projectId}`);\n    }\n  };\n\n  // Helper functions to format chart data from API responses\n  const formatChartData = (data: Record<string, number> | undefined) => {\n    if (!data) return [];\n    return Object.entries(data).map(([key, value]) => ({ name: key, value }));\n  };\n\n  return (\n    <div style={{ minHeight: \"100vh\" }}>\n      <ObjectPage\n        headerArea={\n          <ObjectPageHeader>\n            {/* KPI Cards in Header Area - Smaller width and removed active/completed projects */}\n            <FlexBox\n              wrap=\"Wrap\" // changed from \"NoWrap\" to \"Wrap\"\n              justifyContent=\"SpaceAround\"\n              style={{\n                padding: \"1rem\",\n                overflowX: \"auto\",\n                gap: \"1rem\", // add gap for better wrapping\n              }}\n            >\n              <Card\n                style={{\n                  margin: \"0.5rem\",\n                  minWidth: \"160px\",\n                  flex: \"1 1 160px\", // allow cards to shrink/grow\n                  cursor: \"pointer\",\n                  maxWidth: \"220px\", // optional: limit max width for wrapping\n                }}\n                data-testid=\"tile-total-projects\"\n              >\n                <div style={{ textAlign: \"center\", padding: \"0.75rem\" }}>\n                  <Title level=\"H3\">\n                    {kpiData?.totalProjects\n                      ? Math.round(kpiData.totalProjects).toString()\n                      : \"0\"}\n                  </Title>\n                  <Text>Total Projects</Text>\n                </div>\n              </Card>\n              <Card\n                style={{\n                  margin: \"0.5rem\",\n                  minWidth: \"160px\",\n                  flex: \"1 1 160px\",\n                  cursor: \"pointer\",\n                  maxWidth: \"220px\",\n                }}\n                data-testid=\"tile-total-budget\"\n              >\n                <div style={{ textAlign: \"center\", padding: \"0.75rem\" }}>\n                  <Title level=\"H3\">\n                    {kpiData\n                      ? formatCurrency(Math.round(kpiData.totalBudget))\n                      : \"$0\"}\n                  </Title>\n                  <Text>Total Budget</Text>\n                </div>\n              </Card>\n              <Card\n                style={{\n                  margin: \"0.5rem\",\n                  minWidth: \"160px\",\n                  flex: \"1 1 160px\",\n                  cursor: \"pointer\",\n                  maxWidth: \"220px\",\n                }}\n                data-testid=\"tile-actual-spend\"\n              >\n                <div style={{ textAlign: \"center\", padding: \"0.75rem\" }}>\n                  <Title level=\"H3\" style={{ color: \"#ffc107\" }}>\n                    {kpiData\n                      ? formatCurrency(Math.round(kpiData.actualSpend))\n                      : \"$0\"}\n                  </Title>\n                  <Text>Actual Spend</Text>\n                </div>\n              </Card>\n              <Card\n                style={{\n                  margin: \"0.5rem\",\n                  minWidth: \"160px\",\n                  flex: \"1 1 160px\",\n                  cursor: \"pointer\",\n                  maxWidth: \"220px\",\n                }}\n                data-testid=\"tile-amount-received\"\n              >\n                <div style={{ textAlign: \"center\", padding: \"0.75rem\" }}>\n                  <Title level=\"H3\" style={{ color: \"#17a2b8\" }}>\n                    {kpiData\n                      ? formatCurrency(Math.round(kpiData.amountReceived))\n                      : \"$0\"}\n                  </Title>\n                  <Text>Amount Received</Text>\n                </div>\n              </Card>\n              <Card\n                style={{\n                  margin: \"0.5rem\",\n                  minWidth: \"160px\",\n                  flex: \"1 1 160px\",\n                  cursor: \"pointer\",\n                  maxWidth: \"220px\",\n                }}\n                data-testid=\"tile-total-risks\"\n              >\n                <div style={{ textAlign: \"center\", padding: \"0.75rem\" }}>\n                  <Title level=\"H3\" style={{ color: \"#dc3545\" }}>\n                    {kpiData?.totalRisks\n                      ? Math.round(kpiData.totalRisks).toString()\n                      : \"0\"}\n                  </Title>\n                  <Text>Total Risks</Text>\n                </div>\n              </Card>\n            </FlexBox>\n          </ObjectPageHeader>\n        }\n        titleArea={\n          <ObjectPageTitle>\n            <Title level=\"H1\">TechCorp Engineering Dashboard</Title>\n            {/* Filters in Title Area */}\n            <FlexBox\n              wrap=\"Wrap\"\n              justifyContent=\"Start\"\n              style={{ padding: \"1rem\" }}\n            >\n              <DatePicker\n                value={filters.dateFrom}\n                onChange={(e: any) =>\n                  setFilters({ ...filters, dateFrom: e.target.value as string })\n                }\n                style={{ marginRight: \"1rem\" }}\n                data-testid=\"input-date-from\"\n              />\n              <DatePicker\n                value={filters.dateTo}\n                onChange={(e: any) =>\n                  setFilters({ ...filters, dateTo: e.target.value as string })\n                }\n                style={{ marginRight: \"1rem\" }}\n                data-testid=\"input-date-to\"\n              />\n              <ComboBox\n                value={filters.status}\n                onChange={(e: any) =>\n                  setFilters({ ...filters, status: e.target.value as string })\n                }\n                style={{ marginRight: \"1rem\", width: \"200px\" }}\n                data-testid=\"select-status-filter\"\n              >\n                <ComboBoxItem text=\"All Status\" />\n                <ComboBoxItem text=\"Active\" />\n                <ComboBoxItem text=\"Completed\" />\n                <ComboBoxItem text=\"Delayed\" />\n              </ComboBox>\n              <ComboBox\n                value={filters.division}\n                onChange={(e: any) =>\n                  setFilters({ ...filters, division: e.target.value as string })\n                }\n                style={{ width: \"200px\" }}\n                data-testid=\"select-division-filter\"\n              >\n                <ComboBoxItem text=\"All Divisions\" />\n                <ComboBoxItem text=\"Mechanical\" />\n                <ComboBoxItem text=\"Electrical\" />\n                <ComboBoxItem text=\"Instrumentation\" />\n              </ComboBox>\n            </FlexBox>\n          </ObjectPageTitle>\n        }\n      >\n        {/* Charts Section - temporarily disabled */}\n        <ObjectPageSection id=\"charts-section\" titleText=\"Analytics Dashboard\">\n          <ObjectPageSubSection id=\"charts-subsection\" titleText=\"\">\n            <FlexBox\n              wrap=\"Wrap\"\n              justifyContent=\"SpaceAround\"\n              style={{ padding: \"1rem\", gap: \"2rem\" }}\n            >\n              {/* Spending Categories Pie Chart */}\n              <Card\n              style={{\n                minWidth: \"350px\",\n                maxWidth: \"400px\",\n                height: \"450px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n              header={\n                <CardHeader\n                titleText=\"Spending Categories\"\n                data-testid=\"card-spending-chart\"\n                />\n              }\n              >\n              <div style={{ flex: 1, padding: \"1rem\", minHeight: 0 }}>\n                {spendingStats ? (\n                <PieChart\n                  dataset={formatChartData(spendingStats)}\n                  dimensions={[{ accessor: \"name\" }]}\n                  measures={[{ accessor: \"value\" }]}\n                  chartConfig={{ height: 250 }}\n                />\n                ) : (\n                <Text>Loading...</Text>\n                )}\n              </div>\n              </Card>\n\n              {/* Project Status by Performance Category Pie Chart */}\n              <Card\n              style={{\n                minWidth: \"350px\",\n                maxWidth: \"400px\",\n                height: \"450px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n              header={\n                <CardHeader\n                titleText=\"Project Status (Performance Category)\"\n                data-testid=\"card-status-chart\"\n                />\n              }\n              >\n              <div style={{ flex: 1, padding: \"1rem\", minHeight: 0 }}>\n                {performanceStats ? (\n                <PieChart\n                  dataset={formatChartData(performanceStats)}\n                  dimensions={[{ accessor: \"name\" }]}\n                  measures={[{ accessor: \"value\" }]}\n                  chartConfig={{ height: 250 }}\n                />\n                ) : (\n                <Text>Loading...</Text>\n                )}\n              </div>\n              </Card>\n\n              {/* Projects by Division Bar Chart */}\n              <Card\n              style={{\n                minWidth: \"350px\",\n                maxWidth: \"400px\",\n                height: \"450px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n              header={\n                <CardHeader\n                titleText=\"Projects by Division\"\n                data-testid=\"card-division-chart\"\n                />\n              }\n              >\n              <div style={{ flex: 1, padding: \"1rem\", minHeight: 0 }}>\n                {divisionStats ? (\n                <BarChart\n                  dataset={formatChartData(divisionStats)}\n                  dimensions={[{ accessor: \"name\", label: \"Division\" }]}\n                  measures={[{ accessor: \"value\", label: \"Projects\" }]}\n                  chartConfig={{ height: 250 }}\n                />\n                ) : (\n                <Text>Loading...</Text>\n                )}\n              </div>\n              </Card>\n            </FlexBox>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Projects Table Section */}\n        <ObjectPageSection id=\"projects-section\" titleText=\"Project Portfolio\">\n          <ObjectPageSubSection id=\"projects-subsection\" titleText=\"\">\n            <Card\n              header={\n                <CardHeader\n                  titleText=\"All Projects\"\n                  action={\n                    <Button\n                      icon=\"download\"\n                      design=\"Emphasized\"\n                      data-testid=\"button-export-projects\"\n                    >\n                      Export\n                    </Button>\n                  }\n                  data-testid=\"card-projects-table\"\n                />\n              }\n            >\n              <Table\n                onRowClick={handleTableRowClick}\n                data-testid=\"table-projects\"\n                headerRow={\n                  <TableHeaderRow sticky>\n                    <TableHeaderCell minWidth=\"120px\" width=\"120px\">\n                      <span>Project Code</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"200px\" width=\"600px\">\n                      <span>Project Name</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"100px\" width=\"100px\">\n                      <span>% Complete</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"120px\" width=\"120px\">\n                      <span>Schedule Performance</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"120px\" width=\"120px\">\n                      <span>Budget Status</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"80px\" width=\"80px\">\n                      <span>Risks</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"130px\" width=\"130px\">\n                      <span>Projected Margin %</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"120px\" width=\"120px\">\n                      <span>Actual Margin %</span>\n                    </TableHeaderCell>\n                    <TableHeaderCell minWidth=\"130px\" width=\"130px\">\n                      <span>Margin Deviation %</span>\n                    </TableHeaderCell>\n                  </TableHeaderRow>\n                }\n              >\n                {projects?.map((project) => (\n                  <TableRow\n                    key={project.id}\n                    data-project-id={project.projectCode}\n                    data-testid={`row-project-${project.id}`}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <Link\n                      to={`/project/${project.projectCode}`}\n                      style={{ display: \"contents\" }} // ensures the row layout stays intact\n                    >\n                      <TableCell>\n                        <Text data-testid={`text-project-code-${project.id}`}>\n                          {project.projectCode}\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text data-testid={`text-project-name-${project.id}`}>\n                          {project.description}\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <ProgressIndicator\n                            value={Math.round(project.percentageComplete * 100)}\n                            style={{ width: \"100px\", marginBottom: \"0.25rem\" }}\n                          />\n                          {/* <Text data-testid={`text-completion-${project.id}`}>\n                            {Math.round(project.percentageComplete * 100)}%\n                          </Text> */}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Text\n                          data-testid={`text-performance-category-${project.id}`}\n                          style={{\n                            color:\n                              project.performanceCategory === \"On Track\"\n                                ? \"#28a745\"\n                                : project.performanceCategory ===\n                                  \"Slightly Behind\"\n                                ? \"#ffc107\"\n                                : project.performanceCategory ===\n                                  \"Critical Delay\"\n                                ? \"#dc3545\"\n                                : \"#007bff\",\n                          }}\n                        >\n                          {project.performanceCategory || \"On Track\"}\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text\n                          data-testid={`text-budget-variance-${project.id}`}\n                          style={{\n                            color:\n                              project.budgetStatusCategory === \"Under Budget\"\n                                ? \"#28a745\"\n                                : project.budgetStatusCategory ===\n                                  \"Within Budget\"\n                                ? \"#007bff\"\n                                : project.budgetStatusCategory === \"Over Budget\"\n                                ? \"#ffc107\"\n                                : \"#dc3545\",\n                          }}\n                        >\n                          {project.budgetStatusCategory || project.budgetStatus}\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text\n                          data-testid={`text-risk-count-${project.id}`}\n                          style={{\n                            color:\n                              (project.issuesRisks || 0) > 3\n                                ? \"#dc3545\"\n                                : \"#28a745\",\n                          }}\n                        >\n                          {project.issuesRisks || 0}\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text\n                          data-testid={`text-projected-margin-${project.id}`}\n                        >\n                          {((project.projectedGrossMargin || 0) * 100).toFixed(\n                            2\n                          )}\n                          %\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text data-testid={`text-actual-margin-${project.id}`}>\n                          {((project.actualGrossMargin || 0) * 100).toFixed(2)}%\n                        </Text>\n                      </TableCell>\n                      <TableCell>\n                        <Text\n                          data-testid={`text-margin-deviation-${project.id}`}\n                          style={{\n                            color:\n                              (project.deviationProfitMargin || 0) > 0\n                                ? \"#28a745\"\n                                : \"#dc3545\",\n                          }}\n                        >\n                          {((project.deviationProfitMargin || 0) * 100).toFixed(\n                            2\n                          )}\n                          %\n                        </Text>\n                      </TableCell>\n                    </Link>\n                  </TableRow>\n                ))}\n              </Table>\n            </Card>\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n\n        {/* Map Section */}\n        <ObjectPageSection id=\"map-section\" titleText=\"Project Locations\">\n          <ObjectPageSubSection id=\"map-subsection\" titleText=\"\">\n            {/* <Card\n              header={\n                <CardHeader\n                  titleText=\"Project Geographic Distribution\"\n                  data-testid=\"card-project-map\"\n                />\n              }\n            >\n              <div style={{ height: '400px', width: '100%' }}> */}\n            {(() => {\n              // Get locations array from projectLocations or getSampleLocations\n              const locationsSource = projectLocations || getSampleLocations();\n              const allLocations = locationsSource.flatMap(\n                (project: any) => project.locations || []\n              );\n              // Calculate average lat/lng for center\n              let center: [number, number] = [39.8283, -98.5795]; // fallback to US center\n              if (allLocations.length > 0) {\n                const avgLat =\n                  allLocations.reduce((sum, loc) => sum + loc.lat, 0) /\n                  allLocations.length;\n                const avgLng =\n                  allLocations.reduce((sum, loc) => sum + loc.lng, 0) /\n                  allLocations.length;\n                center = [avgLat, avgLng];\n              }\n              return (\n                <div style={{ height: \"700px\", width: \"100%\" }}>\n                  <MapContainer\n                    center={center}\n                    zoom={4}\n                    style={{ height: \"100%\", width: \"100%\" }}\n                    data-testid=\"map-projects\"\n                  >\n                    <TileLayer\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                    {locationsSource?.map((project: any) =>\n                      project.locations?.map((location: any, index: number) => (\n                        <Marker\n                          key={`${project.id}-${index}`}\n                          position={[location.lat, location.lng]}\n                          eventHandlers={{\n                            click: () => navigate(`/project/${project.id}`),\n                          }}\n                        >\n                          <Popup>\n                            <div>\n                              <strong>{project.code}</strong>\n                              <br />\n                              {project.name}\n                              <br />\n                              <small>Click to view project details</small>\n                            </div>\n                          </Popup>\n                        </Marker>\n                      ))\n                    )}\n                  </MapContainer>\n                </div>\n              );\n            })()}\n            {/* </div>\n            </Card> */}\n          </ObjectPageSubSection>\n        </ObjectPageSection>\n      </ObjectPage>\n    </div>\n  );\n}\n","size_bytes":25707},"client/src/components/dashboard/charts-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n// import { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport type { SpendingData, StatusData, DivisionData } from \"@/lib/types\";\n// import { PieChart, BarChart } from \"@ui5/webcomponents-react\";\nimport { PieChart, BarChart } from '@ui5/webcomponents-react-charts';\nimport '@ui5/webcomponents-react/dist/Assets.js';\n\ninterface ChartsSectionProps {\n  spendingData: SpendingData | undefined;\n  statusData: StatusData | undefined;\n  divisionData: DivisionData | undefined;\n  isLoading: boolean;\n}\n\nconst SPENDING_COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\nconst STATUS_COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n\nexport function ChartsSection({\n  spendingData,\n  statusData,\n  divisionData,\n  isLoading\n}: ChartsSectionProps) {\nconsole.log(\"we in\")\n  const spendingChartData = spendingData ? [\n    { name: 'Under Budget', value: spendingData.underBudget },\n    { name: 'Within Budget', value: spendingData.withinBudget },\n    { name: 'Overspent', value: spendingData.overspent },\n    { name: 'Critical Overspent', value: spendingData.criticalOverspent },\n  ] : [];\n\n  const statusChartData = statusData ? [\n    { name: 'Ahead of Schedule', value: statusData.aheadOfSchedule },\n    { name: 'On Track', value: statusData.onTrack },\n    { name: 'Slightly Behind', value: statusData.slightlyBehind },\n    { name: 'Critical Delay', value: statusData.criticalDelay },\n  ] : [];\n\n  const divisionChartData = divisionData ? [\n    { name: 'Mechanical', value: divisionData.mechanical },\n    { name: 'Electrical', value: divisionData.electrical },\n    { name: 'Instrumentation', value: divisionData.instrumentation },\n  ] : [];\n  console.log(\"Hallosir,Vipi\",divisionChartData, statusChartData, spendingChartData);\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {Array.from({ length: 3 }).map((_, index) => (\n          <Card key={index} className=\"bg-white dark:bg-gray-900\">\n            <CardHeader>\n              <Skeleton className=\"h-6 w-40\" />\n            </CardHeader>\n            <CardContent>\n              <Skeleton className=\"h-64 w-full\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n      {/* Spending Categories Pie Chart */}\n      <Card className=\"bg-white dark:bg-gray-900 border dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle\n            className=\"text-lg font-semibold text-gray-900 dark:text-white\"\n            data-testid=\"text-spending-chart-title\"\n          >\n            Spending Categories\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center\">\n            <PieChart\n              dataset={spendingChartData}\n              dimension={{\n                accessor: \"name\"\n              }}\n              measure={{\n                accessor: \"value\",\n                colors: SPENDING_COLORS\n              }}\n              onClick={function cie() { }}\n              onDataPointClick={function cie() { }}\n              onLegendClick={function cie() { }}\n              noLegend={false}\n            // loading={isLoading}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Project Status Pie Chart */}\n      <Card className=\"bg-white dark:bg-gray-900 border dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle\n            className=\"text-lg font-semibold text-gray-900 dark:text-white\"\n            data-testid=\"text-status-chart-title\"\n          >\n            Project Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center\">\n            <PieChart\n              dataset={statusChartData}\n              dimension={{\n                accessor: \"name\"\n              }}\n              measure={{\n                accessor: \"value\",\n                colors: STATUS_COLORS\n              }}\n              noLegend={false}\n              loading={isLoading}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Projects by Division Bar Chart */}\n      <Card className=\"bg-white dark:bg-gray-900 border dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle\n            className=\"text-lg font-semibold text-gray-900 dark:text-white\"\n            data-testid=\"text-division-chart-title\"\n          >\n            Projects by Division\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center\">\n            <BarChart\n              dataset={divisionChartData}\n              dimensions={[\n                {\n                  accessor: \"name\",\n                  formatter: (name: string) => name\n                }\n              ]}\n              measures={[\n                {\n                  accessor: \"value\",\n                  label: \"Projects\",\n                  color: \"#3B82F6\"\n                }\n              ]}\n              loading={isLoading}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5361},"client/src/components/dashboard/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Moon, Sun } from \"lucide-react\";\nimport type { DashboardFilters } from \"@/lib/types\";\n\ninterface DashboardHeaderProps {\n  filters: DashboardFilters;\n  onFiltersChange: (filters: DashboardFilters) => void;\n}\n\nexport function DashboardHeader({ filters, onFiltersChange }: DashboardHeaderProps) {\n  const { theme, setTheme } = useTheme();\n\n  const handleFilterChange = (key: keyof DashboardFilters, value: string) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value,\n    });\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <header className=\"bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Organization Logo/Name */}\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n             \n            </div>\n          </div>\n\n          {/* Header Controls */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Date Selector */}\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Date Range:\n              </label>\n              <Input\n                type=\"date\"\n                value={filters.dateFrom}\n                onChange={(e) => handleFilterChange('dateFrom', e.target.value)}\n                className=\"w-auto\"\n                data-testid=\"input-date-from\"\n              />\n              <span className=\"text-gray-500 dark:text-gray-400\">to</span>\n              <Input\n                type=\"date\"\n                value={filters.dateTo}\n                onChange={(e) => handleFilterChange('dateTo', e.target.value)}\n                className=\"w-auto\"\n                data-testid=\"input-date-to\"\n              />\n            </div>\n\n            {/* Global Filters */}\n            <Select\n              value={filters.status}\n              onValueChange={(value) => handleFilterChange('status', value)}\n            >\n              <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"delayed\">Delayed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.division}\n              onValueChange={(value) => handleFilterChange('division', value)}\n            >\n              <SelectTrigger className=\"w-40\" data-testid=\"select-division-filter\">\n                <SelectValue placeholder=\"All Divisions\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Divisions</SelectItem>\n                <SelectItem value=\"mechanical\">Mechanical</SelectItem>\n                <SelectItem value=\"electrical\">Electrical</SelectItem>\n                <SelectItem value=\"instrumentation\">Instrumentation</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Dark Mode Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"rounded-lg\"\n              data-testid=\"button-dark-mode-toggle\"\n            >\n              <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n              <span className=\"sr-only\">Toggle theme</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4263},"client/src/components/dashboard/kpi-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Building2, \n  Play, \n  CheckCircle, \n  AlertTriangle, \n  DollarSign, \n  TrendingUp, \n  HandCoins \n} from \"lucide-react\";\nimport type { KPIData } from \"@/lib/types\";\n\ninterface KPICardsProps {\n  data: KPIData | undefined;\n  isLoading: boolean;\n}\n\nexport function KPICards({ data, isLoading }: KPICardsProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 1,\n    }).format(amount);\n  };\n\n  const formatLargeCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    } else if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(0)}K`;\n    }\n    return formatCurrency(amount);\n  };\n\n  const kpiItems = [\n    {\n      title: \"Total Projects\",\n      value: data?.totalProjects || 0,\n      icon: Building2,\n      iconColor: \"text-blue-600 dark:text-blue-400\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n      testId: \"text-total-projects\"\n    },\n    {\n      title: \"Active Projects\",\n      value: data?.activeProjects || 0,\n      icon: Play,\n      iconColor: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-100 dark:bg-green-900\",\n      testId: \"text-active-projects\"\n    },\n    {\n      title: \"Completed\",\n      value: data?.completedProjects || 0,\n      icon: CheckCircle,\n      iconColor: \"text-blue-600 dark:text-blue-400\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n      testId: \"text-completed-projects\"\n    },\n    {\n      title: \"Delayed\",\n      value: data?.delayedProjects || 0,\n      icon: AlertTriangle,\n      iconColor: \"text-red-600 dark:text-red-400\",\n      bgColor: \"bg-red-100 dark:bg-red-900\",\n      testId: \"text-delayed-projects\"\n    },\n    {\n      title: \"Total Budget\",\n      value: data ? formatLargeCurrency(data.totalBudget) : \"$0\",\n      icon: DollarSign,\n      iconColor: \"text-green-600 dark:text-green-400\",\n      bgColor: \"bg-green-100 dark:bg-green-900\",\n      testId: \"text-total-budget\"\n    },\n    {\n      title: \"Actual Spend\",\n      value: data ? formatLargeCurrency(data.actualSpend) : \"$0\",\n      icon: TrendingUp,\n      iconColor: \"text-orange-600 dark:text-orange-400\",\n      bgColor: \"bg-orange-100 dark:bg-orange-900\",\n      testId: \"text-actual-spend\"\n    },\n    {\n      title: \"Amount Received\",\n      value: data ? formatLargeCurrency(data.amountReceived) : \"$0\",\n      icon: HandCoins,\n      iconColor: \"text-blue-600 dark:text-blue-400\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n      testId: \"text-amount-received\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-8\">\n        {Array.from({ length: 7 }).map((_, index) => (\n          <Card key={index} className=\"bg-white dark:bg-gray-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Skeleton className=\"p-2 w-10 h-10 rounded-lg\" />\n                <div className=\"ml-4 space-y-2\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-8\">\n      {kpiItems.map((item, index) => (\n        <Card key={index} className=\"bg-white dark:bg-gray-900 border dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className={`p-2 ${item.bgColor} rounded-lg`}>\n                <item.icon className={`h-5 w-5 ${item.iconColor}`} />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  {item.title}\n                </p>\n                <p \n                  className=\"text-2xl font-bold text-gray-900 dark:text-white\"\n                  data-testid={item.testId}\n                >\n                  {item.value}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4376},"client/src/components/dashboard/project-table.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Download, ChevronUp, ChevronDown } from \"lucide-react\";\nimport type { Project } from \"@shared/schema\";\n\ninterface ProjectTableProps {\n  projects: Project[] | undefined;\n  isLoading: boolean;\n}\n\ntype SortField = 'code' | 'name' | 'percentComplete' | 'status' | 'budgetVarianceCategory';\ntype SortOrder = 'asc' | 'desc';\n\nexport function ProjectTable({ projects, isLoading }: ProjectTableProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortField, setSortField] = useState<SortField>('code');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');\n  const [, navigate] = useLocation();\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('asc');\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'default'; // blue\n      case 'active':\n        return 'secondary'; // green\n      case 'delayed':\n        return 'destructive'; // red\n      default:\n        return 'outline'; // yellow/at risk\n    }\n  };\n\n  const getBudgetVarianceBadge = (category: string) => {\n    switch (category) {\n      case 'under_budget':\n        return { variant: 'secondary' as const, text: 'Under Budget' };\n      case 'within_budget':\n        return { variant: 'default' as const, text: 'Within Budget' };\n      case 'overspent':\n        return { variant: 'outline' as const, text: 'Overspent' };\n      case 'critical_overspent':\n        return { variant: 'destructive' as const, text: 'Critical Overspent' };\n      default:\n        return { variant: 'outline' as const, text: 'Unknown' };\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'Completed';\n      case 'active':\n        return 'On Track';\n      case 'delayed':\n        return 'Delayed';\n      default:\n        return 'At Risk';\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    const num = parseFloat(amount);\n    if (num >= 1000000) {\n      return `$${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `$${(num / 1000).toFixed(0)}K`;\n    }\n    return `$${num.toLocaleString()}`;\n  };\n\n  const calculateProfitDeviation = (project: Project) => {\n    const plannedMargin = (parseFloat(project.plannedRevenue) - parseFloat(project.plannedCost)) / parseFloat(project.plannedRevenue);\n    const actualMargin = (parseFloat(project.actualRevenue) - parseFloat(project.actualCost)) / parseFloat(project.actualRevenue);\n    const deviation = ((actualMargin - plannedMargin) / plannedMargin) * 100;\n    return `${deviation > 0 ? '+' : ''}${deviation.toFixed(1)}%`;\n  };\n\n  const filteredAndSortedProjects = projects\n    ?.filter(project => \n      project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.manager.toLowerCase().includes(searchQuery.toLowerCase())\n    )\n    .sort((a, b) => {\n      let aValue: any = a[sortField];\n      let bValue: any = b[sortField];\n      \n      if (sortField === 'percentComplete') {\n        aValue = a.percentComplete;\n        bValue = b.percentComplete;\n      }\n      \n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = bValue.toLowerCase();\n      }\n      \n      if (sortOrder === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) return null;\n    return sortOrder === 'asc' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white dark:bg-gray-900\">\n        <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex justify-between items-center\">\n            <Skeleton className=\"h-6 w-40\" />\n            <div className=\"flex items-center space-x-4\">\n              <Skeleton className=\"h-10 w-64\" />\n              <Skeleton className=\"h-10 w-24\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"space-y-4 p-6\">\n            {Array.from({ length: 5 }).map((_, index) => (\n              <Skeleton key={index} className=\"h-16 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-900 border dark:border-gray-700\">\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex justify-between items-center\">\n          <h3 \n            className=\"text-lg font-semibold text-gray-900 dark:text-white\"\n            data-testid=\"text-project-table-title\"\n          >\n            Project Portfolio\n          </h3>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search projects...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-64\"\n                data-testid=\"input-project-search\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n            <Button \n              variant=\"default\"\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-export\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800\">\n              <tr>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleSort('code')}\n                  data-testid=\"header-project-code\"\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Project Code</span>\n                    <SortIcon field=\"code\" />\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleSort('name')}\n                  data-testid=\"header-project-name\"\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Project Name</span>\n                    <SortIcon field=\"name\" />\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleSort('percentComplete')}\n                  data-testid=\"header-completion\"\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>% Completion</span>\n                    <SortIcon field=\"percentComplete\" />\n                  </div>\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Time Completion\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Budget Variance\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Risk Count\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Amount Received\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Profit Deviation\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleSort('status')}\n                  data-testid=\"header-status\"\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Status</span>\n                    <SortIcon field=\"status\" />\n                  </div>\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n              {filteredAndSortedProjects?.map((project) => (\n                <tr\n                  key={project.id}\n                  className=\"hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-colors\"\n                  onClick={() => navigate(`/project/${project.id}`)}\n                  data-testid={`row-project-${project.id}`}\n                >\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\"\n                    data-testid={`text-project-code-${project.id}`}\n                  >\n                    {project.code}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\"\n                    data-testid={`text-project-name-${project.id}`}\n                  >\n                    {project.name}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Progress value={project.percentComplete} className=\"w-16\" />\n                      <span data-testid={`text-completion-${project.id}`}>\n                        {project.percentComplete}%\n                      </span>\n                    </div>\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\"\n                    data-testid={`text-time-completion-${project.id}`}\n                  >\n                    {project.elapsedDays}/{project.totalPlannedDays} days\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <Badge \n                      variant={getBudgetVarianceBadge(project.budgetVarianceCategory).variant}\n                      data-testid={`badge-budget-variance-${project.id}`}\n                    >\n                      {getBudgetVarianceBadge(project.budgetVarianceCategory).text}\n                    </Badge>\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\"\n                    data-testid={`text-risk-count-${project.id}`}\n                  >\n                    {project.riskCount}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\"\n                    data-testid={`text-amount-received-${project.id}`}\n                  >\n                    {formatCurrency(project.amountReceived)}\n                  </td>\n                  <td \n                    className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\"\n                    data-testid={`text-profit-deviation-${project.id}`}\n                  >\n                    {calculateProfitDeviation(project)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <Badge \n                      variant={getStatusBadgeVariant(project.status)}\n                      data-testid={`badge-status-${project.id}`}\n                    >\n                      {getStatusText(project.status)}\n                    </Badge>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13092},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/navbar.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, BarChart3, Home, FolderOpen } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const navigationItems = [\n    { href: \"/\", label: \"Dashboard\", icon: Home },\n    { href: \"/projects\", label: \"Projects\", icon: FolderOpen },\n    { href: \"/analytics\", label: \"Analytics\", icon: BarChart3 },\n  ];\n\n  return (\n    <nav className=\"border-b bg-white dark:bg-gray-900 sticky top-0 z-50\">\n      <div className=\"px-2 sm:px-6 lg:px-1\">\n        <div className=\"flex justify-between h-16\">\n          {/* Logo and Company Name */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-3 cursor-pointer\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    Burhani Engineers\n                  </h1>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Project Performance Dashboard\n                  </p>\n                </div>\n              </div>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"default\" : \"ghost\"}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.label}</span>\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n\n          {/* Mobile Menu */}\n          <div className=\"md:hidden flex items-center\">\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" size=\"icon\">\n                  <Menu className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Open menu</span>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-64\">\n                <div className=\"flex flex-col space-y-4 mt-6\">\n                  <div className=\"flex items-center space-x-3 pb-4 border-b\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                      <BarChart3 className=\"h-5 w-5 text-white\" />\n                    </div>\n                    <div>\n                      <h2 className=\"font-bold text-gray-900 dark:text-white\">\n                        ProjectVision\n                      </h2>\n                      <p className=\"text-xs text-gray-500\">Management Dashboard</p>\n                    </div>\n                  </div>\n                  {navigationItems.map((item) => {\n                    const Icon = item.icon;\n                    const isActive = location === item.href;\n                    return (\n                      <Link key={item.href} href={item.href}>\n                        <Button\n                          variant={isActive ? \"default\" : \"ghost\"}\n                          className=\"w-full justify-start flex items-center space-x-3\"\n                          onClick={() => setIsOpen(false)}\n                        >\n                          <Icon className=\"h-4 w-4\" />\n                          <span>{item.label}</span>\n                        </Button>\n                      </Link>\n                    );\n                  })}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":4206},"client/src/pages/project-details-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Navbar } from \"@/components/navbar\";\nimport { ProjectMap } from \"@/components/dashboard/project-map\";\nimport {\n  ArrowLeft,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Settings,\n  Building,\n  ShoppingCart,\n  DollarSign,\n  TrendingUp,\n  AlertTriangle,\n  Target,\n  BarChart3,\n  Users,\n  MapPin,\n  Activity\n} from \"lucide-react\";\n\nimport type { ExcelProject, ExcelActivity } from \"@shared/excel-schema\";\nimport { TimelineChart } from \"@ui5/webcomponents-react-charts\";\nimport { Text } from \"@ui5/webcomponents-react\";\n\nconst formatDate = (excelDate: number | string) => {\n  if (typeof excelDate === 'string') {\n    return new Date(excelDate).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  }\n  // Excel date serial number to JavaScript Date\n  const excelEpoch = new Date(1899, 11, 30); // Excel's epoch\n  const jsDate = new Date(excelEpoch.getTime() + (excelDate * 24 * 60 * 60 * 1000));\n  return jsDate.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n};\n\nconst formatCurrency = (amount: number) => {\n  if (amount >= 1000000) {\n    return `$${(amount / 1000000).toFixed(1)}M`;\n  } else if (amount >= 1000) {\n    return `$${(amount / 1000).toFixed(0)}K`;\n  }\n  return `$${amount.toLocaleString()}`;\n};\n\nconst getStatusBadge = (status: string) => {\n  const statusLower = status.toLowerCase();\n  if (statusLower.includes('on track')) {\n    return <Badge className=\"bg-green-100 text-green-800\">On Track</Badge>;\n  } else if (statusLower.includes('delay') || statusLower.includes('critical')) {\n    return <Badge className=\"bg-red-100 text-red-800\">Critical Delay</Badge>;\n  } else if (statusLower.includes('behind')) {\n    return <Badge className=\"bg-yellow-100 text-yellow-800\">Behind Schedule</Badge>;\n  }\n  return <Badge variant=\"outline\">{status}</Badge>;\n};\n\nconst getBudgetStatusBadge = (status: string) => {\n  const statusLower = status.toLowerCase();\n  if (statusLower.includes('under')) {\n    return <Badge className=\"bg-green-100 text-green-800\">Under Budget</Badge>;\n  } else if (statusLower.includes('within')) {\n    return <Badge className=\"bg-blue-100 text-blue-800\">Within Budget</Badge>;\n  } else if (statusLower.includes('over') || statusLower.includes('critical')) {\n    return <Badge className=\"bg-red-100 text-red-800\">Over Budget</Badge>;\n  }\n  return <Badge variant=\"outline\">{status}</Badge>;\n};\n\nconst getStatusIcon = (percentageComplete: number | string) => {\n  const progress = typeof percentageComplete === 'string' ? parseFloat(percentageComplete) || 0 : percentageComplete;\n  if (progress >= 1) return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n  if (progress > 0) return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n  return <Calendar className=\"w-4 h-4 text-blue-600\" />;\n};\n\nconst getProgressColor = (percentageComplete: number | string) => {\n  const progress = typeof percentageComplete === 'string' ? parseFloat(percentageComplete) || 0 : percentageComplete;\n  if (progress >= 1) return \"bg-green-500\";\n  if (progress > 0.8) return \"bg-yellow-500\";\n  return \"bg-blue-500\";\n};\n\nexport default function ProjectDetailsDashboard() {\n  const [startDateForUpcoming, setStartDateForUpcoming] = useState<string>(\"\");\n  const { id } = useParams();\n\n  // Fetch project data\n  const { data: project, isLoading: projectLoading } = useQuery<ExcelProject>({\n    queryKey: [\"/api/projects\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch project\");\n      return response.json();\n    },\n  });\n\n  // Fetch activities data\n  const { data: milestones } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"milestones\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${project?.projectCode}/milestones`);\n      if (!response.ok) throw new Error(\"Failed to fetch milestones\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  const { data: risks } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"risks\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${project?.projectCode}/risks`);\n      if (!response.ok) throw new Error(\"Failed to fetch risks\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  // Helper to calculate duration in days\n  function getDuration(start: string | number | null, finish: string | number | null): number {\n    const s = typeof start === \"number\" ? formatDate(start) : formatDate(start || 0);\n    const f = typeof finish === \"number\" ? formatDate(finish) : formatDate(finish || 0);\n    if (!start || !finish || s === \"N/A\" || f === \"N/A\") return 1;\n    const startDate = new Date(s).getTime();\n    const finishDate = new Date(f).getTime();\n    return Math.max(\n      1,\n      Math.round((finishDate - startDate) / (1000 * 60 * 60 * 24))\n    );\n  }\n\n  function getTimelineChartData(activities: ExcelActivity[]): any[] {\n    // Find the earliest and latest dates among activities\n    const validStartDates = activities\n      .map((a) => {\n        const d = formatDate(a.startDate);\n        return d !== \"N/A\" && a.startDate\n          ? new Date(typeof a.startDate === \"number\" ? formatDate(a.startDate) : a.startDate).getTime()\n          : null;\n      })\n      .filter((t): t is number => t !== null);\n    const validFinishDates = activities\n      .map((a) => {\n        const d = formatDate(a.finishDate);\n        return d !== \"N/A\" && a.finishDate\n          ? new Date(typeof a.finishDate === \"number\" ? formatDate(a.finishDate) : a.finishDate).getTime()\n          : null;\n      })\n      .filter((t): t is number => t !== null);\n\n    const minDate =\n      validStartDates.length > 0 ? Math.min(...validStartDates) : null;\n\n    // Assign unique IDs for each activity\n    const activityIds = activities.map((activity, idx) =>\n      activity.id ? String(activity.id) : `ACT-${idx}`\n    );\n\n    return activities.map((activity, idx) => {\n      const startDateStr = formatDate(activity.startDate);\n      const finishDateStr = formatDate(activity.finishDate);\n\n      // Calculate start offset from earliest date\n      let startOffset = 0;\n      if (\n        minDate !== null &&\n        startDateStr !== \"N/A\"\n      ) {\n        const activityStart = new Date(startDateStr).getTime();\n        startOffset = Math.round(\n          (activityStart - minDate) / (1000 * 60 * 60 * 24)\n        );\n      }\n\n      // Connect to previous activity if exists\n      const connections = [];\n      if (idx > 0) {\n        connections.push({\n          itemId: activityIds[idx - 1],\n          type: \"F2S\",\n        });\n      }\n\n      return {\n        color: `var(--sapChart_OrderedColor_${(idx % 11) + 1})`,\n        label: activity.item,\n        tasks: [\n          {\n            id: activityIds[idx],\n            start: startOffset,\n            duration: getDuration(activity.startDate, activity.finishDate),\n            connections: connections.length > 0 ? connections : undefined,\n          },\n        ],\n      };\n    });\n  }\n\n  // TimelineChart rendering function\n  function renderTimelineChart(activities: ExcelActivity[]) {\n    if (!activities || activities.length === 0)\n      return <Text>No timeline data</Text>;\n\n    // Use activities as listed (no sorting)\n    const dataset = getTimelineChartData(activities);\n\n    // Adjust all activities so the first activity starts at 1\n    const firstStart = dataset[0]?.tasks?.[0]?.start ?? 0;\n    const offset = firstStart === 0 ? 1 : 0;\n\n    const adjustedDataset = dataset.map((d, idx) => ({\n      ...d,\n      tasks: d.tasks.map((task) => ({\n        ...task,\n        start: task.start + offset,\n      })),\n    }));\n\n    // Find earliest and latest dates for display (actual dates)\n    const validStartDates = activities\n      .map((a) => a.startDate)\n      .filter((d): d is string | number => !!d && d !== \"N/A\");\n    const validFinishDates = activities\n      .map((a) => a.finishDate)\n      .filter((d): d is string | number => !!d && d !== \"N/A\");\n\n    let minDate: Date | null = null;\n    let maxDate: Date | null = null;\n    if (validStartDates.length > 0) {\n      minDate = new Date(\n        formatDate(\n          validStartDates.reduce((a, b) =>\n            new Date(formatDate(a)).getTime() <\n              new Date(formatDate(b)).getTime()\n              ? a\n              : b\n          )\n        )\n      );\n    }\n    if (validFinishDates.length > 0) {\n      maxDate = new Date(\n        formatDate(\n          validFinishDates.reduce((a, b) =>\n            new Date(formatDate(a)).getTime() >\n              new Date(formatDate(b)).getTime()\n              ? a\n              : b\n          )\n        )\n      );\n    }\n\n    const start = 1; // Start at 1 instead of 0\n    const totalDuration = Math.max(\n      ...adjustedDataset.map((d) => (d.tasks?.[0]?.start || 0) + (d.tasks?.[0]?.duration || 0)),\n      1\n    );\n\n    // Format actual earliest and latest dates for column title, including day of week\n    const startDateLabel = minDate\n      ? minDate.toLocaleDateString(\"en-US\", {\n        weekday: \"short\",\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      })\n      : \"\";\n    const finishDateLabel = maxDate\n      ? maxDate.toLocaleDateString(\"en-US\", {\n        weekday: \"short\",\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      })\n      : \"\";\n     if (!startDateForUpcoming) {\n      setStartDateForUpcoming(startDateLabel);\n    }\n    return (\n      <TimelineChart\n        dataset={adjustedDataset}\n        isDiscrete\n        start={start}\n        totalDuration={16}\n        columnTitle={`Duration`}\n        style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n      />\n    );\n  }\n\n  const { data: upcomingActivities } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"upcoming\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${project?.projectCode}/upcoming`);\n      if (!response.ok) throw new Error(\"Failed to fetch upcoming activities\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  const { data: lateActivities } = useQuery<ExcelActivity[]>({\n    queryKey: [\"/api/projects\", project?.projectCode, \"late\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${project?.projectCode}/late`);\n      if (!response.ok) throw new Error(\"Failed to fetch late activities\");\n      return response.json();\n    },\n    enabled: !!project?.projectCode,\n  });\n\n  if (projectLoading || !project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 md:p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">Loading project details...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navbar />\n      <div className=\"p-4 md:p-6\">\n        {/* Header with Back Button */}\n        <div className=\"mb-6 flex items-center gap- justify-between\">\n\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n             {project.projectCode}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm mt-1\">\n              {project.description}\n            </p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        {/* KPI Cards Row */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 mb-6\">\n          <Card data-testid=\"kpi-scope-completion\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Scope Completion</CardTitle>\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {((project.scopeCompletion || 0) * 100).toFixed(0)}%\n              </div>\n              <Progress value={(project.scopeCompletion || 0) * 100} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"kpi-time-completion\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Time Completion</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {((project.timeCompletion || 0) * 100).toFixed(0)}%\n              </div>\n              <Progress value={Math.min((project.timeCompletion || 0) * 100, 100)} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"kpi-performance-category\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Performance</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg font-medium\">\n                {getStatusBadge(project.performanceCategory || 'Unknown')}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">Current status</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"kpi-budget-status\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Budget Status</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg font-medium\">\n                {getBudgetStatusBadge(project.budgetStatusCategory || 'Unknown')}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {formatCurrency(project.budgetAmount)}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"kpi-margin-deviation\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Margin Deviation</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {((project.deviationProfitMargin || 0) * 100).toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">From projected</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"kpi-total-risks\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Risks</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {project.issuesRisks || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Issues & risks</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Budget & Financial Details */}\n          <Card data-testid=\"card-budget-details\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                Budget & Financial Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Budget Amount</p>\n                    <p className=\"text-lg font-semibold\">{formatCurrency(project.budgetAmount)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Amount Spent</p>\n                    <p className=\"text-lg font-semibold text-orange-600\">\n                      {formatCurrency(project.totalAmountSpent)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Budget Spent</p>\n                    <p className=\"text-lg font-semibold\">\n                      {(project.budgetSpent * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Amount Received</p>\n                    <p className=\"text-lg font-semibold text-green-600\">\n                      {project.amountReceived || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Projected Margin</p>\n                    <p className=\"text-lg font-semibold\">\n                      {(project.projectedGrossMargin * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Actual Margin</p>\n                    <p className=\"text-lg font-semibold\">\n                      {(project.actualGrossMargin * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Time & Performance Metrics */}\n          <Card data-testid=\"card-time-metrics\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Time & Performance Metrics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Start Date</p>\n                    <p className=\"text-lg font-semibold\">{formatDate(project.startDate || 0)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Finish Date</p>\n                    <p className=\"text-lg font-semibold\">{formatDate(project.finishDate || 0)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Division</p>\n                    <p className=\"text-lg font-semibold\">{project.division}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Performance Index</p>\n                    <p className=\"text-lg font-semibold\">\n                      {(project.performanceIndex || 0).toFixed(2)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Overall Progress</p>\n                    <div className=\"flex items-center gap-2\">\n                      <Progress value={project.percentageComplete * 100} className=\"flex-1\" />\n                      <span className=\"text-sm\">{(project.percentageComplete * 100).toFixed(0)}%</span>\n                    </div>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Location</p>\n                    <p className=\"text-sm font-medium flex items-center gap-1\">\n                      <MapPin className=\"h-3 w-3\" />\n                      Multiple sites\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Milestones Section */}\n          <Card data-testid=\"card-milestones\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Project Milestones ({milestones?.length || 0})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-70 overflow-y-auto\">\n                {milestones && milestones.length > 0 ? (\n                  (() => {\n                    // Order milestones by phase: Preliminaries, Procurement, Construction, Commissioning\n                    const phaseOrder = ['Preliminaries', 'Procurement', 'Construction', 'Commissioning'];\n                    const orderedMilestones = milestones.sort((a, b) => {\n                      const aPhase = phaseOrder.findIndex(phase =>\n                        a.item.toLowerCase().includes(phase.toLowerCase()));\n                      const bPhase = phaseOrder.findIndex(phase =>\n                        b.item.toLowerCase().includes(phase.toLowerCase()));\n\n                      if (aPhase === -1 && bPhase === -1) return 0;\n                      if (aPhase === -1) return 1;\n                      if (bPhase === -1) return -1;\n                      return aPhase - bPhase;\n                    });\n\n                    return orderedMilestones.map((milestone, index) => {\n                      const progress = typeof milestone.percentageComplete === 'string' ?\n                        parseFloat(milestone.percentageComplete) || 0 : milestone.percentageComplete || 0;\n                      const isComplete = progress >= 1;\n\n                      return (\n                        <div\n                          key={index}\n                          className={`flex items-center justify-between p-3 border rounded-lg transition-colors ${isComplete\n                            ? 'bg-green-50 dark:bg-green-950/20 border-green-200'\n                            : 'bg-gray-50 dark:bg-gray-800 border-gray-200'\n                            }`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            {getStatusIcon(progress)}\n                            <div>\n                              <p className={`font-medium text-sm ${isComplete ? 'text-green-800 dark:text-green-200' : ''\n                                }`}>\n                                {milestone.item}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {formatDate(milestone.startDate || 0)} - {formatDate(milestone.finishDate || 0)}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress\n                              value={progress * 100}\n                              className={`w-16 h-2 ${isComplete ? 'bg-green-100' : ''}`}\n                            />\n                            <span className={`text-xs ${isComplete ? 'text-green-600 font-medium' : 'text-muted-foreground'\n                              }`}>\n                              {(progress * 100).toFixed(0)}%\n                            </span>\n                          </div>\n                        </div>\n                      );\n                    });\n                  })()\n                ) : (\n                  <p className=\"text-center text-muted-foreground text-sm\">No milestones data available</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Risks Section */}\n          <Card data-testid=\"card-risks\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                Risk Management ({risks?.length || 0})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {risks && risks.length > 0 ? (\n                  risks.map((risk, index) => (\n                    <div\n                      key={index}\n                      className=\"p-3 border rounded-lg bg-red-50 dark:bg-red-950/20 border-red-200\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-sm\">{risk.item}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Owner: {risk.owner || 'Unassigned'}\n                          </p>\n                        </div>\n                        <Badge variant=\"destructive\">{risk.status || 'Active'}</Badge>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-center text-muted-foreground text-sm\">No active risks</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Budget Consumption Chart */}\n\n        </div>\n\n        {/* Activities Section - Full Width */}\n        <div className=\"mt-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Upcoming Activities - 3/4 width */}\n            <Card data-testid=\"card-upcoming-activities\" className=\"lg:col-span-3\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Upcoming Activities ({upcomingActivities?.length || 0})\n                </CardTitle>\n                <p>\n                  <span className=\"text-xs text-muted-foreground\">\n                    Next 14 days of activities (from {startDateForUpcoming || 'N/A'})\n                  </span>\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  {upcomingActivities && upcomingActivities.length > 0 && renderTimelineChart(upcomingActivities || [])}\n                  {upcomingActivities && upcomingActivities.length === 0 && (\n                    <p className=\"text-center text-muted-foreground text-sm\">No upcoming activities</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Late Activities - 1/4 width - Compact */}\n            <Card data-testid=\"card-late-activities\" className=\"lg:col-span-1\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                  Late Tasks ({lateActivities?.length || 0})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {lateActivities && lateActivities.length > 0 ? (\n                    lateActivities.map((activity, index) => (\n                      <div\n                        key={index}\n                        className=\"p-2 border border-red-200 rounded-lg bg-red-50 dark:bg-red-950/20\"\n                      >\n                        <div className=\"space-y-1\">\n                          <p className=\"font-medium text-xs text-red-800 dark:text-red-200\">\n                            {activity.item}\n                          </p>\n                          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                            <div>\n                              <span>{formatDate(activity.finishDate || 0)}</span>\n                              <div className=\"text-red-600 font-medium mt-1\">\n                                Late by: {(() => {\n                                  const finishDate = new Date(1899, 11, 30);\n                                  finishDate.setTime(finishDate.getTime() + ((activity.finishDate || 0) * 24 * 60 * 60 * 1000));\n                                  const today = new Date();\n                                  const diffTime = today.getTime() - finishDate.getTime();\n                                  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                                  return diffDays > 0 ? `${diffDays} days` : '0 days';\n                                })()}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Progress\n                                value={typeof activity.percentageComplete === 'string' ?\n                                  (parseFloat(activity.percentageComplete) || 0) * 100 :\n                                  (activity.percentageComplete || 0) * 100}\n                                className=\"w-8 h-1\"\n                              />\n                              <span>\n                                {typeof activity.percentageComplete === 'string' ?\n                                  ((parseFloat(activity.percentageComplete) || 0) * 100).toFixed(0) :\n                                  ((activity.percentageComplete || 0) * 100).toFixed(0)}%\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-center text-muted-foreground text-sm\">No late activities</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        <div className=\"mt-6\">\n          <Card data-testid=\"card-budget-chart\" className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Budget vs Time vs Scope Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Performance Comparison Chart */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium text-muted-foreground\">Performance Comparison</h4>\n\n                  {/* Budget vs Expected Progress */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Budget Consumption</span>\n                      <span className={`font-medium ${(project.budgetSpent || 0) > (project.scopeCompletion || 0) ? 'text-red-600' : 'text-green-600'\n                        }`}>\n                        {((project.budgetSpent || 0) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                      <div\n                        className={`h-3 rounded-full transition-all duration-300 ${(project.budgetSpent || 0) > (project.scopeCompletion || 0) ? 'bg-red-500' : 'bg-green-500'\n                          }`}\n                        style={{ width: `${Math.min((project.budgetSpent || 0) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n\n                  {/* Scope Completion */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Scope Completion</span>\n                      <span className=\"font-medium text-blue-600\">\n                        {((project.scopeCompletion || 0) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                      <div\n                        className=\"h-3 rounded-full bg-blue-500 transition-all duration-300\"\n                        style={{ width: `${(project.scopeCompletion || 0) * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n\n                  {/* Time Completion */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Time Elapsed</span>\n                      <span className={`font-medium ${(project.timeCompletion || 0) > 1 ? 'text-red-600' : 'text-orange-600'\n                        }`}>\n                        {((project.timeCompletion || 0) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n                      <div\n                        className={`h-3 rounded-full transition-all duration-300 ${(project.timeCompletion || 0) > 1 ? 'bg-red-500' : 'bg-orange-500'\n                          }`}\n                        style={{ width: `${Math.min((project.timeCompletion || 0) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n\n                  {/* Performance Indicators */}\n                  <div className=\"grid grid-cols-3 gap-3 pt-2 border-t\">\n                    <div className=\"text-center\">\n                      <p className=\"text-xs text-muted-foreground\">Budget Efficiency</p>\n                      <p className={`text-sm font-bold ${(project.scopeCompletion || 0) > (project.budgetSpent || 0) ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                        {(project.scopeCompletion || 0) > 0 ?\n                          (((project.scopeCompletion || 0) / (project.budgetSpent || 0.01)) * 100).toFixed(0) + '%' :\n                          'N/A'\n                        }\n                      </p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-xs text-muted-foreground\">Schedule Performance</p>\n                      <p className={`text-sm font-bold ${(project.scopeCompletion || 0) > (project.timeCompletion || 0) ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                        {(project.timeCompletion || 0) > 0 ?\n                          (((project.scopeCompletion || 0) / (project.timeCompletion || 0.01)) * 100).toFixed(0) + '%' :\n                          'N/A'\n                        }\n                      </p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-xs text-muted-foreground\">Overall Index</p>\n                      <p className=\"text-sm font-bold text-blue-600\">\n                        {(project.performanceIndex || 0).toFixed(2)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Financial Summary */}\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-muted-foreground\">Budget</p>\n                    <p className=\"text-lg font-bold\">{formatCurrency(project.budgetAmount)}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-muted-foreground\">Spent</p>\n                    <p className=\"text-lg font-bold text-orange-600\">{formatCurrency(project.totalAmountSpent)}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-muted-foreground\">Remaining</p>\n                    <p className=\"text-lg font-bold text-green-600\">\n                      {formatCurrency(Math.max(0, project.budgetAmount - project.totalAmountSpent))}\n                    </p>\n                  </div>\n                </div>\n\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Project Location Map */}\n        <div className=\"mt-6\">\n          <ProjectMap projects={project ? [project] : []} />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":36755},"client/src/components/dashboard/project-map.tsx":{"content":"import { useMemo } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin } from \"lucide-react\";\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport type { ExcelProject } from \"@shared/excel-schema\";\n\n// Fix default markers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface ProjectMapProps {\n  projects: ExcelProject[];\n}\n\ninterface ParsedLocation {\n  lat: number;\n  lng: number;\n  projectCode: number;\n  division: string;\n  description: string;\n}\n\n// Division colors\nconst divisionColors = {\n  'Instrumentation': '#3B82F6', // Blue\n  'Electrical': '#EF4444', // Red\n  'Mechanical': '#10B981', // Green\n  'Civil': '#F59E0B', // Amber\n  'Construction': '#8B5CF6', // Purple\n  'Engineering': '#EC4899', // Pink\n  'Safety': '#F97316', // Orange\n  'default': '#6B7280' // Gray\n};\n\nfunction parseLocationString(locationStr: string): { lat: number; lng: number }[] {\n  if (!locationStr || locationStr.trim() === '') return [];\n  \n  try {\n    // Remove extra whitespace and parse the array-like string\n    const cleanStr = locationStr.trim();\n    \n    // Handle different formats: \"[(lat, lng), (lat, lng)]\" or \"[lat, lng]\"\n    if (cleanStr.startsWith('[') && cleanStr.endsWith(']')) {\n      const content = cleanStr.slice(1, -1);\n      \n      // Split by ), ( to get individual coordinate pairs\n      const pairs = content.split(/\\),\\s*\\(/).map(pair => \n        pair.replace(/[()]/g, '').trim()\n      );\n      \n      return pairs.map(pair => {\n        const [lat, lng] = pair.split(',').map(coord => parseFloat(coord.trim()));\n        if (!isNaN(lat) && !isNaN(lng)) {\n          return { lat, lng };\n        }\n        return null;\n      }).filter(Boolean) as { lat: number; lng: number }[];\n    }\n  } catch (error) {\n    console.error('Error parsing location:', locationStr, error);\n  }\n  \n  return [];\n}\n\nfunction createCustomIcon(division: string): L.DivIcon {\n  const color = divisionColors[division as keyof typeof divisionColors] || divisionColors.default;\n  \n  return L.divIcon({\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 24px;\n        height: 24px;\n        border-radius: 50%;\n        border: 2px solid white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">\n        <div style=\"\n          width: 8px;\n          height: 8px;\n          background-color: white;\n          border-radius: 50%;\n        \"></div>\n      </div>\n    `,\n    className: 'custom-marker',\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n    popupAnchor: [0, -12]\n  });\n}\n\nfunction MapBounds({ locations }: { locations: ParsedLocation[] }) {\n  const map = useMap();\n  \n  useMemo(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.lat, loc.lng]));\n      map.fitBounds(bounds, { padding: [20, 20] });\n    }\n  }, [locations, map]);\n  \n  return null;\n}\n\nexport function ProjectMap({ projects }: ProjectMapProps) {\n  const locations = useMemo(() => {\n    const parsedLocations: ParsedLocation[] = [];\n    \n    projects.forEach(project => {\n      if (project.location) {\n        const coords = parseLocationString(project.location);\n        coords.forEach(coord => {\n          parsedLocations.push({\n            lat: coord.lat,\n            lng: coord.lng,\n            projectCode: project.projectCode,\n            division: project.division || 'default',\n            description: project.description\n          });\n        });\n      }\n    });\n    \n    return parsedLocations;\n  }, [projects]);\n\n  const divisionCounts = useMemo(() => {\n    const counts: Record<string, number> = {};\n    locations.forEach(loc => {\n      counts[loc.division] = (counts[loc.division] || 0) + 1;\n    });\n    return counts;\n  }, [locations]);\n\n  if (locations.length === 0) {\n    return (\n      <Card data-testid=\"card-project-map\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5\" />\n            Project Locations Map\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-muted-foreground\">\n            No location data available for projects\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-project-map\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5\" />\n          Project Locations Map ({locations.length} locations)\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Legend */}\n          <div className=\"flex flex-wrap gap-2\">\n            {Object.entries(divisionCounts).map(([division, count]) => (\n              <Badge\n                key={division}\n                variant=\"outline\"\n                className=\"flex items-center gap-1\"\n                style={{\n                  borderColor: divisionColors[division as keyof typeof divisionColors] || divisionColors.default\n                }}\n              >\n                <div\n                  className=\"w-3 h-3 rounded-full\"\n                  style={{\n                    backgroundColor: divisionColors[division as keyof typeof divisionColors] || divisionColors.default\n                  }}\n                />\n                {division} ({count})\n              </Badge>\n            ))}\n          </div>\n\n          {/* Map */}\n          <div className=\"h-96 rounded-lg overflow-hidden border\">\n            <MapContainer\n              center={[0, 0]}\n              zoom={2}\n              style={{ height: '100%', width: '100%' }}\n              data-testid=\"leaflet-map\"\n            >\n              <TileLayer\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n              \n              <MapBounds locations={locations} />\n              \n              {locations.map((location, index) => (\n                <Marker\n                  key={`${location.projectCode}-${index}`}\n                  position={[location.lat, location.lng]}\n                  icon={createCustomIcon(location.division)}\n                >\n                  <Popup>\n                    <div className=\"space-y-2 min-w-48\">\n                      <div className=\"font-semibold text-sm\">\n                        Project {location.projectCode}\n                      </div>\n                      <div className=\"text-xs text-gray-600\">\n                        {location.description}\n                      </div>\n                      <Badge\n                        variant=\"outline\"\n                        className=\"text-xs\"\n                        style={{\n                          borderColor: divisionColors[location.division as keyof typeof divisionColors] || divisionColors.default\n                        }}\n                      >\n                        {location.division}\n                      </Badge>\n                      <div className=\"text-xs text-gray-500\">\n                        {location.lat.toFixed(4)}, {location.lng.toFixed(4)}\n                      </div>\n                    </div>\n                  </Popup>\n                </Marker>\n              ))}\n            </MapContainer>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7936},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}}}